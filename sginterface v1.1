#!/usr/bin/env Python3
import PySimpleGUI as sg
from PySimpleGUI import easy_print
from PySimpleGUI import popup_no_frame
from PySimpleGUI import set_options
from PySimpleGUI import popup_animated
import sys
import tkinter as tk
import fitz
from PIL import Image, ImageTk
import time
import webbrowser



# by Simon Gross


from PySimpleGUI import popup_scrolled

import tkinter as tk
from tkinter import scrolledtext
import textwrap


sg.ChangeLookAndFeel('NeutralBlue')

slide0 = b'iVBORw0KGgoAAAANSUhEUgAAAlgAAAFSCAIAAAChdzZwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAACPfSURBVHhe7d1tYiorDIDhsy4X5Hq6GjfTxdzLjKhDCBA+tIy8z7+jA4TAkKqt599/AAAsjEIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiGAP3C7Xv49XX5+/cPAH6AQAvi8359DHfz373rzjwN/gEII4PMohJjIlIUweNMk5eJcrz8/t1/eVPkrvz+WldJw7q2OQoiJTFgIxR1icrm6gujb41NaVuqBg29xFEJMZMJCeLv6e6OWq4YUw09qXimHg29xFEJM5JsK4YbfPvugjpVinVZHIcRE5i+E19tv7Ha7/aQ+n+KW+hSxUpcftyxGlMHVUQgxkTMUQv+46lf7xRpuqs+oWingiEKIiZy9EG7ELeXwxttHUAjRjEKIiXxDIVRKIZXwEyiEaEYhxES+oxBGjaiEn0AhRDMKISbyLYUwek1Ye2NtHza+uriY/zDxd/+tnUNTZ/9b/+a/9Hc9XkWPe39Vfyk5pJOSDxXCR4rDFd6mM3I+rRvgL+UyM+iLJprS8rttvyCsLaaw5ecKIfsHRd9SCKOXhGqz46/WXF5XRFX0Lv+qcr/X/ZVJdbfDMbwEF3WhvyGd2Ly7EJpS7Niz3LgBgpQasxf0eRgrKxzoJ9UoPHQzrLG2pUVT+LIht1S+8QcK4TT7B9NbrBAGh9N9myY2sZPZx8GBVWI7jexdDolrxE36zkKYXpYEU5YbN4CYqCV3sldTcgwJrf9Wu8OBndKYFindJLR3IC4eunkcayxP79w/mN63FkJ9D8b7WDQLpPZxos325ovj/yUUZqHfTKkeE50N6aRG20oZVP2ccVA8y1o3QPVM47UwZKc4ir7CZamd/NCalqO62NyLsPD6cZvHmW7/YHbf+hmh4WZ1l4RDbTfn9sfe26dr+7+1PuL7fftRUlyovSeTuSui4OO3an6P74apKRnSSZ2mlSqKM+zsn7m8vloh+X0KhbOneQNUTlWbQzE9opFyvYhij3hLin96c/94zj/9kh+8OS1P2oTvn5Pdba3jKw4GbR5HC+XP9w8m9yWFUJ4QiS0Y7uPjyyTjnpU3Wa6ZuEvSMxGd5ia8VTJ90CGdVGpZqRKZYZfj9M/p7tCXV+cn1rwBZFiFucql35QybljBV7d7jfGPaqI0ZgNuTosXjZZYtH3n6YZsHscayu5z+weT+4pCGG3+1K6M75KddRPL5sXQRAN9nPCixhtqSCe1xhfCaIHKM4ma5NrEF+8M+ZIts5PV6mBpFDGA2v9+jenDrLqA29Oyi6bbMNaAzeNEnU+zfzC3LyiEFTtZ3cfmW7Dl3A/bqIGFlzQeCEM6qRUlxL/xVOKbx0SH1gPG3qxjA4imudASx2VNmwEr2BuwOQSZ/mJDbbghW3bm/YOpnbsQqp+HZHa/so/tuziMy3iPGVqFVzTeVUM6qSVWyi4Rn+zPPA25rsnF6dkAom3labnLbJo3LKCII9NnT1rkqtlujGjEETOee/9gZmcohP51xMH+gfTxHfqX7H0Y7WPbXbsLw7I3LJ5wIqi2G2tIJ7XkwWOmZ090V7E25pOsZwPIxqYxLtfS8t+17q4c+57oSYsxKxF7dFaz7x9MbP5CWONSuJ1ab1qn+b4tH3Fywk0315BOKjWvlBpcx+LEJ1RifbrGMLY+ZsVdEiYpEVd4UWVYKfYt25EWY+Jj9uiMOiZhnkbXGJjY9xRCy+8QdNx8zUeVYcx4xqVfClQM6aRO40olfl4RvVWejKJ1YoE6NsDG0vwYyB5FGJnaJux31PFqn2xHWmx5V3QuRewE+wfT+oZCeDH+Hl3PPhYtt0GtfANPH1Of8z4x+6E4pJMafUePIDJcWw1szXsPsvKMgxHuzweNtMDCqOpm7j8ncPx2O/AdepnJdqSleQ/0LoUk+ptz/2BWZy2E232+fbNw3Uue9n0sWrZLjZkbwPzSbkgndkMLoeis8yBLBNO+AbzSlIMB/LPhoPHESs+r9L+bz8lMtj0tomXFqrWPqTvH/sGkzvDLMv7xAdr3sQiqXWbMzJ8bb2yVbEgnRkNXqrOzTx1k+TCD/p9ncTiqPKLzzyrqv250l5lse1pEy3kKYW1/IpxE+9FBYxYUQhsRVCPDe7hbIQtvyYDtXeAhnZQNXamzHGRhnOLkPz55eCocNtOmXEnyP+fkZCbbnhbRkkKIc6IQ2oigKm74Jr+5UmYNe0gnOUNXqjPDnzvIwkCDOI9PBU+E4wbDht3lI5KT3Ozforn9TZG/5sU+2fa0iJbzFMJ59w9mRCG0ab/huyRKWd3wQzrRDF2psQdZovmQgyyM9DBS0HvYd9jm8FzyiZgI3sknyT7Z9rTImOxN28fUnWf/YEIUQqM3RlWifTVw9fhDOhGG5qT9SN3ZYhlzkIVjPc/MoHPZddjm+WziYY1MUPGot0+2Iy3Ne2DMUrzI9FR2+Mn9g/lQCI1EVLU/cPaSt3nT+EM6ORi7Ul0ZNjYec5DpvQSPxj2HEWpt8uHIxSvHbp+s/cqIaGpftY4xdefZP5gPhdDqjWGZDLkHx97IY1MiYqs6yWTbVCiD5q92c8yGFnuQrfsFYT/5aOqTbZ9sT1pEXOZVG7QUL6LDmfcPpkMhtLLeK28T5qVx+CGdPAxeqfaTTASSjmTUQab0c4xBjzyIcrsk7KUQTH2y7ZPtSYtoa1w1uWJ1Y+raItl8fP9gNhRCs/b7bIgh9+DYG3n0SskMG3usWJhh8486Oj6QCCBs4y4K8leKpTrZMi2ZFl1pkeOUm0ctnLoxdfWR7GSzT+wfTIZCWEFENqQUbiFZ/spdhB4OPaSTesNXSsTnlEOM/rAuF4YYoCPisKfL9RhFqlvRJvhV3mIoMjf5BnEmcw360hKNlV00JbJN5Zi6uO9p9w/mQiGsodxolr9N3/+gz12sjfecbbYnObC4v4d0Uu8NKyW63FzSBd7n9Sg/qYEHWbwXHtK9ptsY1iJqnBpHycomM9netMSrps8nPf+upTg4z/7BVCiEddRb2b0Y2/6m2V9yt/+viT/BCwX1JhOzvf91tH/O2bqJ/wpQBj6kk3pvWSnlKHP2FO9/N75L/X+UpXoy8iBLneq5TlNtDHVQa+yyEm673DeQZuLqTos6r/s2vFPWy63o4ZExm8c5zf7BTCiE1fQ7zUK7zdQjJC8Oe0gn9d60Ug2z2RmqydCDLHHkZqNoafOSysz2FfTRue46Da7PTHZAWioXbXvnwhpdrcpQnj69fzARCmEL/b2nIn28uvs2cbcO6aTW+1Yq8e5emvHrU8ceZFpVK6W2pc2BS4xvlOXTEUw3M9kxabHuwcd0rdE1OMf+wTwmLITBl+tfBp3ZXnB/9HVdc6/dvw/SN1TY/k+dws06pJMqYQrGrpR1PtuMsrkNjY04+n8gtvcq/XMpSpvK47Twv08cPxM7TDc72VFpKd0UQX6ORd0F7R8d5gT7B9OYsBCeyvbph7vfojemtkeuykeHWf6jlKCrvaOtH39N0ZBOJqIneJvQWWc0xCMtPh/O/aetCRKi7MA/jI39AwMKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFcEq36+Xf0+Xn1z/8CX84NAD8BQrhjH5/DsXo37/rzT/+AX84NAD8CQrhjCiEwNn83n5+rruf2y/vpJzLjIXw9+f47lzaxXGbzu063/BrUAiBUxH3DXfOyUxYCKMtZeFK4hfVQwohcCq3q79jHvh4/VQmLITRljL7mmJIIQTOJP7pnUJ4Kl9VCDdfcXJTCLsEc6g8kHraroMsSdGpxY+QpzJ/IXSv8jS37ZPp4Mx++IL7kkLYJdxBdfuhp+06yFLk9/h3R5crKTmXMxRC/7jO7T9/4cvpfxijEHahEL4bWcJ3OX0hdMTZ7Zy9ElIIu1AI340s4bt8QyGMmpz+zqQQdqEQvhtZwnf5jkIYVcJTnt8vFMIuFMJ3I0v4Ll9SCMXxXXV+718Isf1xvm97d/9j/c5viHh07fvcbR2X+p22EP66GbkJ+Sc3fjr++TlMUwhzW2to0qJ1efOynDNLE0ucFOWjAmN8ZyE03Znbr3mF915Cw58n7ueSb56U7reuEIpv4rn89NTN5NCF7/ux/p5c0L/LgH+4oPRN4CJqi+fQPW1TTOvv2KvV8ZcSg7QFv60YsS5L0TmyVHILZlFZwAtbt7RHdcaTIp+AcGjbcdV0I4o52hqdwne+NVpqY/0Stxfzke1kTyZJvWPEqZMbWzmgKkKNqUMrg6gMt3/Ta4liPsT6WzyH7mmrsSbryXRyBb0+xs8Xwaf6H+Ri58hSiRy15lYpnDHFPaqoOynSCRChWe6qpkwUUnBmX/nLMvmNUH0LepbtFYVioPRrvamUvx2xRZkWDa2MkVNarrA3Y7TFfNRn/TV0T9tI1dF2UDzlgxTs49fs495dcZYsFcmk2c9ykYCoYXGPSomMbm+IOv5fQqrXUnCRePMYMlE9yol8QyGs3NzRBtzfeAjeib9/5OKffimGop1N+/v8zy8FuG0di4vibm03VXwn9Z936hQOjpNRprLJZykM2hhwMR+FqDXPTnrahtSewvVPfxFEIRVB35ef8D2++yCPEdRl6d0a58hSmRw9v1tfiqeS6LjQb5yE7QWfmJt2CiUSUHloamtQzETdDE/m9IUwesFSvFVeDfbTwz+qibZLPhZlcyf7P76pFfdq2HLaYIWJm8T9PuhvzWjvzuXSFC6XMWZDPo6axvDa2yorkn4F4864KG3ZwTLrojVTXseXslZj1iwZyABsaRHpVBrV7FEZQ25O0UqqPVfOKt4d5cTWTPB8zlsI7z/6+oseLHfJvqCZu++oZn/JzVWMxd/mynWlPSfDsk3cJO56l01XdFtl0hReawy7lA+haQyvtW2Ut3LTqlXU18VtY/98LGpRSluFWbNkITu0dCd2uJZJ0W3FwhTXRTRQA67qVEzHyyfCPr9Tmr8QmhlrWx3LHtzJjdh1t2Y3XfzDftdYgpzHppjYqFH6Nmk6QrP5iDWN4TW2lWtibGhvpqxLcQzRe10ismbNkolMZbk7EYC6/8x71NKZZMi3GD83KWUv7SramKI+k68phPcPSXwXAxk3gNxbfRslM2iUnc5TQYpuElv/Mqzk/A23dKzyLmwaw2tra56+JNOdHDBaF8sQIixzVEWzZslIBFLqzjRb6x4dkTq1lQgg3XO0lZ4y0YQBjNtJs/iiV4S74S8LjftbBN25UVKDRlvYeh/ZmW8nQSQg2c5wR8eMi/DQNIbX1NY6eYVc0lTbyhTctS5m0axZsqoKxTZZ4wI1Zc4J26m9G1c7uOxyLfe7aQ37NL6tEG6GFkPb/hYx924UdVDx4Ju2o22+MRldKrimO6oyqJ67tqWtCK9uQJm4xOTa1qUnEzmzZsksnEA2GONcbQvUtoyOJQpbho89uUvCjhMBGXNwYuf9ZRm37vuvWau/Zd19ozyZdu7o2zQeNPpg8F2bcdCdmoyv6ZaqDKrntm1pK6Zeufq2xLWtS08mcmbNkp25P+tUbQvUkridqXvLRccI9vHDkNQ2Yb/duZ/RmQvhk/Zb1pZ2T1tFdSXV8X/OeuC780wbsHunyA0dvn+xRfG2rWi64TSiYapl00lQGVTzaeM0tO1cfVvztnXpyUTOrFmqEE4h2aF5pqYFEhe5Ds18A890d2lXBRHcnw8aaTMMo+5P/Yy+ohBuoi1mWTDtLzDy9GjaQk6LJxN6414UQ1dMxZaE8CrjRCqDahrDa2grJl67OHKx9dm1rUtPJnJmzVINS0Bi1FzQpgWSs2iWmr6YVHRZEIB/NgwqnmPp+a/wNYVQ2WTZJav/utGdHk1ryCliKtebGMDpHiMhGto/XmZLQniV8a6qDKppDK+hrW3iSXLf6u3b1qUnEzmzZqmKiEiZRU3STdeKIdslQ8mnOQjyOeEwdJmH/LPf4osKYbzNkovW+l2Hxv1dEbJOuanEQ073KCplaCNbEsKrjLdVZVBNY3gNbTtXX66s3r5tXXoykTNrluqIPqNpVOXcdLFIQqPsbwNml+b45OGpMPZMG9tSn9FXFcJon6lt5S21eX5Xo7/mpWV/14SsUgeN437HrjTNV2VLQniVcQaVQTWN4TW0FROvXRW5rvrs2talJxM5s2apkuhUxFSXctPVnUkwyazN8angiTD4IPawuyFpn9FyhVDeUKXd+Cf7OzWonN8bNqZpvhqZ2ETLcArGTFUG1TSG19C2c/XF5BLN29alJxM5s2apVq7XyoybLn/PLITk4gSjhwGGbQ7PJZ/4MqsVQrETy1vxT/Z3elAZ//C9aZqvRuQ+lYPwMmOmKoNqGsNraCvXpHJFROISrdvWpScTObNmqZqI6jCT2oTbrn/TNEKJ1QkilCOHbZ7PJh7+PosVwvq7sWl/9544uUHlFEaeb45tvjFrZptWtzKocIy69LS07Vp9Y+O2denJRM6sWaon8vrsuDrftgZvm8eRHkrwaBxeGJnWxpCE81rsl2Xq+7btb3FV75YpDCrn2T3egW2+EZmA5B3e1H/lsoWX1x02LW3Nk1fItqm5ta1LTyZyZs1SA9G1jyp81BKqcYEqt3IbNZbjyNqEgsjuF4T9vCfWSXxTIRQNtdWu77ttf3dumuKgcrjeAV/E0LZDIGqVbiSvLMcdRVRsE2bHNIGnprb26UvmfSOGMC53TyZyZs1SE9H71nkYqilQ4wLJJIydyoMSzHGW+oSCPGyXhL28J9JZfE0hlBtMX+3qvs37VvRccZcrlH0s2eZbL+7XkKaayctrC53LyzeleKpX+aCtbZQ1WzvZLJM3w5ZQhLMZs0M2s2apTTSbcETbeNYFevtsdlE0xwcSQ0azDvJiXOOz+opCaP+KNbkL853Lq510AxG2ZYe7nbYNEPcZbWP/eCgasTAdE2XOTvYvl6Im+ZnLsDNXJ/7eszRNEVB5IQ4a28ZpK7eMZpeblxjAuNJhrqsSkTVrlhqJLRl+oZlxcvYFqrgB2oXhXK7HLKZiE22CLLwh61M5QyHc/r5Pd7v9VH7pdnQrJi/UD+HMfojvcrfFU/Xj2H18I1hvKnlLZeOzUWbh6ZNRri/EELdQT4J0IOVJyrzUZKW1bbwWmeXXtlf+PLRuiVAY1MATd9IstVLCerAOWLFAyh2Q+0HzwZ13ezpsuU7fP+n26TbvSftE5i+EDXKrpm3Cn/AP6XPfQJrdhPo+2v5W/1XMldIdhys6ygyqTKdvywYdRt/1+/zigW0mepoMt6m2wocsxR2L75grDqEu8jNu17t7OtVJe1t947rWwfr7LqTSstm3xFEY0sDTbNIsNdOjcswjVi1QnD5nz4H4Tg+fi+B+MIakjuHkIku1eVvep/F1hTDz86WXXOyd/8eD2wHB9aUDqCX4uE8RYn7QeMhSkDnB0HL2Zcaha9K0dxk0MAxSHiB9b7e3rUzWk+GcqdoST+FUDMPYTZmldonp2G+l2gUq5y/Fmgd9hHzrljZfYcJC2HyfbD+S+j7yfm2b0L9fEcRTvjGUt3Ny3CC+4UHlTRVPx37/SsHQ9xvAOiPT+zsPtlV+ZieYomV2xf4zN3dX27rlN2etckt44c4Ye57NmKUO6nQq7qOGBapNgmcOSjvmSnugpc03mLAQui1l3iDba7jr/p6Mb2tWGOT4wvKwX41bwnSfu8iTN3fQ3jComM2zftQ7hn7opjSjloOq0Gfw2v54zFjvy/xJnU9RT1s3MdsOtv/o5tRuiV0wjY5dkTBflnrI7XipKwBNC1S8sY7uH0z4hhbRIec6KLVX2ozeNjOasRB+jrsX3bIf3w/1H4L55/vEvW/9b4X7Q3f2aL/bXRvMZ5tOX778J0rREvinez0/sHqyh9zTdvNY/2ADnHsHKMjSAFsSlSxsafB5WCQRf2btQggAWB6FEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJa2RiG8XS//ni4/v/7hz5smkA9acc4AzmSJQvj7cziK//273vzjHzdNIB+04pwBnMr0hfD39/ZzvV4uwWnq/nm5Xn9uv7aXFzVnsRvOjbcxd29HIaQQApjOxIXwN3hPLcmVxFuhYJnPYnHh8GObQkghBDCdSQthVJFKsp89mc/i29Vf8jD4Iy0KIYUQwHRmLIS2V4JCrmRZz+K4/FIIu1EIAUxuvkIYvSpzLpfrz+32+3DbPseTNStzwprP4mjswcc2hZBCCGA6sxXCuAxmPgHcfo/mccqOeEW49XgosK76Dn09SCF0KIQAZjNZIZR10PLW5L145Q7Yac5iCiGFEMB05iqEog6O+oSOQviHKIQAJjdVIRRn5rBDk0L4hyiEACY3VSF80wtCCuFfohACmByFcJT9K3CCb8DZvv7mJ/hVn85A9m+90b5k5w1fgiMpX/CzjxxOUJGfsyFpLR6ZCobe+zZEDGAxMxfCYRWrov40fUP07+uXVzWv3z5tLYR7ufCNkkYUEI3hG35yX+6TmnNhTq+kVTFlyiknK9wJxW8v2gVzdW38w3liyw3a8wDspv6McNRrQnv9qa9UUcwJ+1Tqu3fKdejAeGKb2QdPrZU2Z+O357mLayZjXYqnbLIa3p6QAZjWV4xj2xMARpqqEGpH2YiDwV5/7Ffu6o5e9yqkrntHvkj2tnf9HP8vYdhZqk8vNXZi2CilVUkz/yhU9ePCQboWVleoeGL1Czxs7QDYzVUI1aO3/0VOdBb7x2P2Kx012P09t+cX4ORP59KpFw+w5UIkQ3szcMgraTm68m6im+P1WRITs9Gy9BLky00kvrblpdhu77rwdUSb5ACVNUoLotRGNipeD+ANJiuEyXPz0vP5l/20qTiX4kD1ip15GzB/7MkBchXBDeKv8vpP1JpUbFNMhRfn6UFtEc2kPBfrSuxcuY3iSYQu+y3EEQeeX7NNRZIBvM10hVA71x6U1yQm9uPGfmV07OUOscSUapoUz0jRoHQEl4TddfSmz92VKv98LGqRnXt0dTnWOCS9jbwuG4dWB0vBiAGKawzgLSYshE72A59L9Xul9vPGfGX1K7D48M02Ev2bjsiwTWclDDszja9TJl4MTcw+d71cCOO0bc1E7Lm+tfXdVLTpSDKAHnMWQid1sDzUlEP7gWO9suKkfommlA4k7N94uDe20oV9jSyElr5Efq2JqghUhqVnS1yVTmk0y6fMMgzLMYAu0xbCTebjNc9WDcUplTlxjFeaz0fBGkhrRRt4stpzVtDUkTXBog7aMxUNkWhrDCS47HK1LUPrKgMYbOpCuNuqYXhkScUjxH4W266UZ6i5ShgDsccrjDxaRY1p7q1tMraZiL7rQrStom2IY7jukjD6xJRHLhaAHvMXwrvi95Dkzlf7WWy7UtQI+xlmDKT5iLRP1EDM0mn6ZaW2mGwpECFWzte2jJb4jz3t3YRdq23CfisWGcBoZymEd7lymDlK7Gex7crm89fWvbjKTc3MN/DsgenEPL3901n7sW1P/lE4tK1G1RYTY/Pyagcd3Z8PGmk9h4PXhg5gpHMVwrvUR4fJ08R+FpuuNB6gClsg4qp2mYka5UIxvj60zVkyFUJRomqriZxcKrRSJQz68c+GfceRlZ4H8EFnLIQ7eYrtEkeZuDZzFpuuFBcNL4Ti4G2Xmahd4TeWiuXQnvyjlkJYO10RWbp9fpygm2ekYedyAvlnAXzWaQuhIw8yRz/LxIWZA9N0pbho0kJY/deWOYXfWMqNZU/+0VSFMB/N8cnDU2HvmTY1GwjAO5y5EMZHWeJMsZ/FpivFRRXnmC0Qcb7Pc04GXy0qpbJqT/5RtvQ8dCZKRJYLLRPO8angibD7oPOwO2NKALzLuQthdBbqh4r9LDZdWXGACrZAxFXzFMKHRD3UA7Un/yhTeV7E4tcmqibPyXiCTsLJJctd8gkAf+LshVAcZvqpYj+LbVeKA9h+khkDae7/k7Rvr9YitSf/KFl4jkyLn1aV5kRAQQiyh7DN89nEwwD+CoUwYLtSXGV/JWIMRJzQ9v4/TWZfi9Se/KNE3RG6ElXXWJ9G8Gg8NbXkhT0Z8wHgjXhrNGC8svUAtgYi+p/4sCzPyJ78ozADqQSLvqsqoWxbCkydxzFMbfBgGvcLwn4mXlpgHScvhKJiJM4V+1lsvFIeorYDWAabDkT2P/FxGU5KCdSe/KOw22R+2xZiY9s5R8pEjp3oQwfDbJeEvUy8sMBCJiqE25lxuZpPso08zRLnoP0stl4pD+DyiRa1cNKN5NX2A/7DygmzpjQUrmx6+vULsWvKbzST4wOmrecuCiZmTAaA95qnEL6ODONfwMnDLH2uRCeYfzxmvjIaPHuUxqHucuegsca/yRaw5ZtjxMS0IM0pDVgLoZLacqairwgwBhWOdbkeu0l1IdoEv21rHBbAm81TCMXJnz2G1e8cTR+A9rO44tSWlSoVQHxSP2UPwrid6QeE/W/93MV9h+xzctkxZYhqAipSemAuhNpCuOuTUfv0HJUr50N6LdPTSrexjwvgrWZ8RRi4uB+8XU30ftxP4fq5kjtV7GdxzamtBrzXb2+r1uKS68+xUaEopAbYRvCX3G1j7anx12z6Tlntp5JDf9uA8ULo06lJ6UtFIVRLobNn6rkYe4bsf/2YoC6Jk5tVqg11EJjFRJ8Rpg4MA/e6xXeisp/Fdad2ZcTbi6ugSbko6Ee8Rd8x27AWqcnUpfShqhA2xburzlKi5ma7aWkD4IMmKoSO8r5VkeENQ/tZXH1qW0/gx7EXXG8qCg0p2RgLTlJdacmc6tUp3VUWQqd67xg/iha0qlYKr6UNgM+ZqxDuCv8H70H2c8Sj4IzMHkH2K59KJ7CL8tWNu9g/vHVvLVY1h/zFnJUS20IU60lDSt3Yx/JZeMH/Yt06PSn6lUME66tT2nT+nAJgoAkL4YM71dz5If+32e0B5WOyv+Y/ETzGeq9IA8PcxlAyck/J+3KiTO21Cv6auSR3zj1L/ioAuJu4EAIA8H4UQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgKVRCAEAS6MQAgCWRiEEACyNQggAWBqFEACwNAohAGBpFEIAwNIohACApVEIAQBLoxACAJZGIQQALI1CCABYGoUQALA0CiEAYGkUQgDA0iiEAIClUQgBAEujEAIAlkYhBAAsjUIIAFgahRAAsDQKIQBgaRRCAMDSKIQAgIX999//ysUHb7WojIgAAAAASUVORK5CYII='

# MENU-------------------------------------------------------------------------------------------------------------

def menu():
    layout_Main = [
        [sg.Menu(menu_def, tearoff=True)],
        [sg.Column(column1, size=(900, 700), scrollable=True), sg.Column(column2, size=(500, 500))]
    ]

    title_window = sg.Window('Simon Gross Sceience Program v0.1', layout_Main, default_element_size=(30, 1),
                             size=(1750, 780), grab_anywhere=True)

    immunology_window_active = False
    genomics_window_active = False
    cancerImmunology_window_active = False
    neurobiology_window_active = False
    robotics_window_active = False
    climate_window_active = False
    exit_active = False

    while True:
        event1, value1 = title_window.Read()

        if event1 is None and event1 == 'Exit':
            break

        if not immunology_window_active and event1 == 'Immunology':
            immunology()

        if not genomics_window_active and event1 == 'Genomics':
            genomics()

        if not genomics_window_active and event1 == 'Cancer':
            title_window.Hide()
            cancer_window_active = True
            layout2 = [[sg.Text('Window 2')],
                       [sg.Button('Exit')]]
            cancer_window = sg.Window('Cancer', layout2)
            while True:
                event2, value2 = cancer_window.Read()
                if event2 is None or event2 == 'Exit':
                    cancer_window_active = False
                    cancer_window.Close()
                    title_window.UnHide()
                    break

        if not neurobiology_window_active and event1 == 'Neurobiology':
            title_window.Hide()
            neurobiology_window_active = True
            layout2 = [[sg.Text('Window 2')],
                       [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th.png')],
                       [sg.Button('Exit')]]
            neurobiology_window = sg.Window('Cancer').Layout(layout2)
            while True:
                event2, value2 = neurobiology_window.Read()
                if event2 is None or event2 == 'Exit':
                    neurobiology_window_active = False
                    neurobiology_window.Close()
                    title_window.UnHide()
                    break

        if not cancerImmunology_window_active and event1 == 'Cancer Immunology':
            cancerImmunology()
        if not climate_window_active and event1 == 'Climate Change':
            climate()



def pdfreader():
    if len(sys.argv) == 1:
        fname = sg.popup_get_file('Document Browser', 'Document file to open',
                                  no_window=True,
                                  file_types=(
                                      ("PDF Files", "*.pdf"),
                                      ("XPS Files", "*.*xps"),
                                      ("Epub Files", "*.epub"),
                                      ("Fiction Books", "*.fb2"),
                                      ("Comic Books", "*.cbz"),
                                      ("HTML", "*.htm*")
                                      # add more document types here
                                  )
                                  )
    else:
        fname = sys.argv[1]

    if not fname:
        sg.popup("Cancelling:", "No filename supplied")
        raise SystemExit("Cancelled: no filename supplied")

    doc = fitz.open(fname)
    page_count = len(doc)

    # used for response time statistics only
    fitz_img_time = 0.0
    tk_img_time = 0.0
    img_count = 1

    # allocate storage for page display lists
    dlist_tab = [None] * page_count

    title = "PyMuPDF display of '%s', pages: %i" % (fname, page_count)

    def get_page(pno, zoom=False, max_size=None, first=False):
        """Return a PNG image for a document page number.
        """
        dlist = dlist_tab[pno]  # get display list of page number
        if not dlist:  # create if not yet there
            dlist_tab[pno] = doc[pno].getDisplayList()
            dlist = dlist_tab[pno]
        r = dlist.rect  # the page rectangle
        clip = r
        # ensure image fits screen:
        # exploit, but do not exceed width or height
        zoom_0 = 1
        if max_size:
            zoom_0 = min(1, max_size[0] / r.width, max_size[1] / r.height)
            if zoom_0 == 1:
                zoom_0 = min(max_size[0] / r.width, max_size[1] / r.height)
        mat_0 = fitz.Matrix(zoom_0, zoom_0)

        if not zoom:  # show total page
            pix = dlist.getPixmap(matrix=mat_0, alpha=False)
        else:
            mp = r.tl + (r.br - r.tl) * 0.5  # page rect center
            w2 = r.width / 2
            h2 = r.height / 2
            clip = r * 0.5
            tl = zoom[0]  # old top-left
            tl.x += zoom[1] * (w2 / 2)
            tl.x = max(0, tl.x)
            tl.x = min(w2, tl.x)
            tl.y += zoom[2] * (h2 / 2)
            tl.y = max(0, tl.y)
            tl.y = min(h2, tl.y)
            clip = fitz.Rect(tl, tl.x + w2, tl.y + h2)

            mat = mat_0 * fitz.Matrix(2, 2)  # zoom matrix
            pix = dlist.getPixmap(alpha=False, matrix=mat, clip=clip)

        if first:  # first call: tkinter still inactive
            img = pix.getPNGData()  # so use fitz png output
        else:  # else take tk photo image
            pilimg = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            img = ImageTk.PhotoImage(pilimg)

        return img, clip.tl  # return image, clip position

    root = tk.Tk()
    max_width = root.winfo_screenwidth() - 20
    max_height = root.winfo_screenheight() - 135
    max_size = (max_width, max_height)
    root.destroy()
    del root

    cur_page = 0
    data, clip_pos = get_page(cur_page, zoom=False, max_size=max_size, first=True)

    image_elem = sg.Image(data=data)

    goto = sg.InputText(str(cur_page + 1), size=(5, 1), key="-PageNumber-")

    layout = [[
        sg.ReadButton('Next'),
        sg.ReadButton('Prev'),
        sg.Text('Page:'),
        goto,
        sg.Text('(%i)' % page_count),
        sg.ReadButton('Zoom'),
        sg.Text('(toggle on/off, use arrows to navigate while zooming)'),
    ],
        [image_elem],
    ]

    window = sg.Window(title, layout, return_keyboard_events=True,
                       location=(0, 0), use_default_focus=False, no_titlebar=False)

    # now define the buttons / events we want to handle
    enter_buttons = [chr(13), "Return:13"]
    quit_buttons = ["Escape:27", chr(27)]
    next_buttons = ["Next", "Next:34", "MouseWheel:Down"]
    prev_buttons = ["Prev", "Prior:33", "MouseWheel:Up"]
    Up = "Up:38"
    Left = "Left:37"
    Right = "Right:39"
    Down = "Down:40"
    zoom_buttons = ["Zoom", Up, Down, Left, Right]

    # all the buttons we will handle
    my_keys = enter_buttons + next_buttons + prev_buttons + zoom_buttons

    # old page store and zoom toggle
    old_page = 0
    old_zoom = False

    while True:
        event, value = window.read()
        if event is None and (value is None or value['-PageNumber-'] is None):
            break
        if event in quit_buttons:
            break

        zoom_pressed = False
        zoom = False

        if event in enter_buttons:
            try:
                cur_page = int(value['-PageNumber-']) - 1  # check if valid
                while cur_page < 0:
                    cur_page += page_count
            except:
                cur_page = 0  # this guy's trying to fool me

        elif event in next_buttons:
            cur_page += 1
        elif event in prev_buttons:
            cur_page -= 1
        elif event == Up:
            zoom = (clip_pos, 0, -1)
        elif event == Down:
            zoom = (clip_pos, 0, 1)
        elif event == Left:
            zoom = (clip_pos, -1, 0)
        elif event == Right:
            zoom = (clip_pos, 1, 0)
        elif event == "Zoom":
            zoom_pressed = True
            zoom = (clip_pos, 0, 0)

        # sanitize page number
        if cur_page >= page_count:  # wrap around
            cur_page = 0
        while cur_page < 0:  # pages > 0 look nicer
            cur_page += page_count

        if zoom_pressed and old_zoom:
            zoom = zoom_pressed = old_zoom = False

        t0 = time.perf_counter()
        data, clip_pos = get_page(cur_page, zoom=zoom, max_size=max_size,
                                  first=False)
        t1 = time.perf_counter()
        image_elem.update(data=data)
        t2 = time.perf_counter()
        fitz_img_time += t1 - t0
        tk_img_time += t2 - t1
        img_count += 1
        old_page = cur_page
        old_zoom = zoom_pressed or zoom

        # update page number field
        if event in my_keys:
            goto.update(str(cur_page + 1))

    window.close()

    # print some response time statistics
    if img_count > 0:
        print("response times for '%s'" % doc.name)
        print("%.4f" % (fitz_img_time / img_count), "sec fitz avg. image time")
        print("%.4f" % (tk_img_time / img_count), "sec tk avg. image time")
        print("%.4f" % ((fitz_img_time + tk_img_time) / img_count), "sec avg. total time")
        print(img_count, "images read")
        print(page_count, "pages")

#========================================================================================================================
#----------SHORTCUTS----------SHORTCUTS----------SHORTCUTS----------SHORTCUTS----------SHORTCUTS----------SHORTCUTS
#=========================================================================================================================

def shortcut1():
    c1 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\apa.png')
    c2 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\apa2.png')

    shows = [slide0, c1, c2,]

    layout = [

        [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                  right_click_menu=['UNUSED', 'Exit'])],
        [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
         sg.Button('Exit', size=(20, 3), key='Exit1')]
    ]

    window = sg.Window('APA', layout,
                       size=(1000, 800),
                       no_titlebar=False,
                       grab_anywhere=True,
                       keep_on_top=True,
                       background_color='white',
                       alpha_channel=1,
                       margins=(1, 1))

    offset = 0
    show = shows[0]
    while True:  # Event Loop
        event, values = window.read()
        if event in (None, 'Exit', 'Cancel'):
            break
        elif event.startswith('Exit1'):
            window.close()
        elif event.startswith('Forward'):  # if clicked on the image
            offset += (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        elif event.startswith('Back'):
            offset -= (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        window['-IMAGE-'].update(show)

def shortcut2():
    c1 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\rb.png')

    shows = [slide0, c1]

    layout = [

        [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                  right_click_menu=['UNUSED', 'Exit'])],
        [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
         sg.Button('Exit', size=(20, 3), key='Exit1')]
    ]

    window = sg.Window('Ribsome', layout,
                       size=(1000, 800),
                       no_titlebar=False,
                       grab_anywhere=True,
                       keep_on_top=True,
                       background_color='white',
                       alpha_channel=1,
                       margins=(1, 1))

    offset = 0
    show = shows[0]
    while True:  # Event Loop
        event, values = window.read()
        if event in (None, 'Exit', 'Cancel'):
            break
        elif event.startswith('Exit1'):
            window.close()
        elif event.startswith('Forward'):  # if clicked on the image
            offset += (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        elif event.startswith('Back'):
            offset -= (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        window['-IMAGE-'].update(show)

def shortcut3():
    c1 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\rbp.png')
    c2 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\rbp2.png')
    c3 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\rbp3.png')

    shows = [slide0, c1, c2, c3]

    layout = [

        [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                  right_click_menu=['UNUSED', 'Exit'])],
        [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
         sg.Button('Exit', size=(20, 3), key='Exit1')]
    ]

    window = sg.Window('RBP', layout,
                       size=(1000, 800),
                       no_titlebar=False,
                       grab_anywhere=True,
                       keep_on_top=True,
                       background_color='white',
                       alpha_channel=1,
                       margins=(1, 1))

    offset = 0
    show = shows[0]
    while True:  # Event Loop
        event, values = window.read()
        if event in (None, 'Exit', 'Cancel'):
            break
        elif event.startswith('Exit1'):
            window.close()
        elif event.startswith('Forward'):  # if clicked on the image
            offset += (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        elif event.startswith('Back'):
            offset -= (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        window['-IMAGE-'].update(show)

def shortcut4():
    c1 = (r'C:\Users\User\PycharmProjects\GUI\shortcut\5mc.png')

    shows = [slide0, c1]

    layout = [

        [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                  right_click_menu=['UNUSED', 'Exit'])],
        [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
         sg.Button('Exit', size=(20, 3), key='Exit1')]
    ]

    window = sg.Window('m5C', layout,
                       size=(1000, 800),
                       no_titlebar=False,
                       grab_anywhere=True,
                       keep_on_top=True,
                       background_color='white',
                       alpha_channel=1,
                       margins=(1, 1))

    offset = 0
    show = shows[0]
    while True:  # Event Loop
        event, values = window.read()
        if event in (None, 'Exit', 'Cancel'):
            break
        elif event.startswith('Exit1'):
            window.close()
        elif event.startswith('Forward'):  # if clicked on the image
            offset += (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        elif event.startswith('Back'):
            offset -= (offset < len(shows) - 1)  # add 1 until the last one
            show = shows[offset]  # get a new image
        # update the image in the window
        window['-IMAGE-'].update(show)

#========================================================================================================================
#----------IMMUNOLOGY----------IMMUNOLOGY----------IMMUNOLOGY----------IMMUNOLOGY----------IMMUNOLOGY----------IMMUNOLOGY#
#=========================================================================================================================

def immunology():
    column1_dend = [[sg.Text("", background_color='white')],
                    [sg.Text("Dendritic cells are antigen presenting cells and their main function is process antigen material and present it on the surface to teh T-cells.", background_color='white')],
                    [sg.Text("They act as messengers between the innate and adaptive immune systems. Dendritic cells are present in those tissues that are in contact with the", background_color='white')],
                    [sg.Text("external environment, such as the skin, nose, lungs, stomach and intestines. They can also be found in an immature state in the blood. Once activated,", background_color='white')],
                    [sg.Text("they migrate to the lymph nodes where the interact with T-cells and B-cells to initiate and shape the adaptive immune response.", background_color='white')],
                    [sg.Text("At certain developmental stages they grow branched projections, the dendrites that give the cell its name. While similat in appearance,", background_color='white')],
                    [sg.Text("these are structures distinct from the dendrites of neurons. There are two main types of denritic cells, which are:", background_color='white')],
                    [sg.Text("1. Myeloid DC or conventional DC - most similar to monocytes. Two types: mDC-1 (common) - Major stimulator of T cells and  ", background_color='white')],
                    [sg.Text("   mDC-2 (rare): May help in fighting wound infection. Both express TLR2 and TLR4 receptos and secrete IL-12, IL-6, TNF and chemokines " , background_color='white')],
                    [sg.Text("2. Plasmacytoid DC (pDC) - Look like plasma cells but have certain charactristics similar to myeloid DC. They express TLR7 and TLR9 and ", background_color='white')],
                    [sg.Text("   secrete large amounts of IFN-alpha", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("", background_color='white')],

                        ]
    column2_dend= [[sg.Image(r'C:\Users\User\PycharmProjects\GUI\cells\DC.png', background_color='white')]]

    dend_layout = [
        [(sg.Column(column1_dend, size=(800, 600), background_color='white', scrollable=True)),
         (sg.Column(column2_dend, size=(800, 600), background_color='white', scrollable=True))
         ]]




    column1_Macrophage = [[sg.Text("", background_color='white')],
                          [sg.Text("Macrophages are leukocytes (white blood cells), large phagocytes which engulf and digest cellular debris, microbes, cancer cells and any other foreign debris.",background_color='white')],
                          [sg.Text("They are present in all tissues, are derived from monocytes and have several subtypes depending on tissue/organ location. These subtypes include:", background_color='white')],
                          [sg.Text("1. Histiocytes - macrophages located in tissue", background_color='white')],
                          [sg.Text("2. Kupffer cells - macrophages located in the liver ", background_color='white')],
                          [sg.Text("3. Alveolar macrophage - macrophages located in the lungs ", background_color='white')],
                          [sg.Text("4. Microglia - a macrophage glial cell located throughout the brain and spinal cord", background_color='white')],
                          [sg.Text("5. Adipose tissue macrophage - found in fatty tissue", background_color='white')],
                          [sg.Text("6. Sinus histiocytes - macrophages found in lymph nodes", background_color='white')],
                          [sg.Text("7. Osteoclasts - macrophages found in bone tissue", background_color='white')],
                          [sg.Text("8. Monocytes - found in bone marrow and blood", background_color='white')],
                          [sg.Text("9. Hofbauer cells - found in the placenta", background_color='white')],
                          [sg.Text("10. Intraglomerular mesangial cells - found in the kidney tissue", background_color='white')],
                          [sg.Text("11. Epithelioid cells - macrophages found in granulomas", background_color='white')],
                          [sg.Text("12. Red pulp macrophages - found in the spleen", background_color='white')],
                          [sg.Text("13. Peritoneal macrophages - found in the peritoneal tissue", background_color='white')],
                          [sg.Text("14. LysoMac - macrophages found in the Peyers patch", background_color='white')],
                          [sg.Text("", background_color='white')],
                          [sg.Text("Besides phagocytosis, they play a critical role in non-specific defense (innate immune system) and also help inititate specific defense mechanisms(adaptive immunity),", background_color='white')],
                          [sg.Text("by recruiting other immune cells such as lymphocytes. Macrophages can be split into two types M1 and M2. M1 macrophages promote inflammation, while M2 macrophages,", background_color='white')],
                          [sg.Text("have anti-inflammatory roles. They have the following markers including CD14, CD40, CD11b, CD64, EMR1, lysozyme M and CD68.", background_color='white')],
                          [sg.Text("Macrophages develope from monocytes and reside in adult healthy tissues. When a monocyte enters damaged tissues through the endothelium of a blood vessel (known as ", background_color='white')],
                          [sg.Text("leukocyte extravasation, it undergoes a series of changes to become a macrophage. ), ", background_color='white')],
                          [sg.Text("", background_color='white')],
                          [sg.Text("", background_color='white')],
                          [sg.Text("", background_color='white')],


                     [sg.Image(r'C:\Users\User\PycharmProjects\GUI\macrophage.png',
                               background_color='white')]
                     ]

    column1_Bcell = [[sg.Text("", background_color='white')],
                    [sg.Text("B lymphocytes are a type of white blood cell of the lymphocyte subtype. They function in humoral immunity component of the adaptive immune system by secreting antibodies. ",background_color = 'white')],
                     [sg.Text("Additionally, B-cells are professional antigen presenting cells and secrete cytokines. B-cells develop from hematoppoietic stem cells that originate in the bone marrow.", background_color='white')],
                     [sg.Text("After B-cells mature in the bone marrow, they migrate through the blood to secondary lymph nodes which are recieve a constant supply of antigen through circulating lymph.",background_color='white')],
                     [sg.Text("When the B-cell comes into contact with these antigens via B-cell receptor,they become activated and can differentiate into different subtypes of B-cells including antibody secreting plasma cells",background_color='white')],
                     [sg.Text(",memory B-cell, lymphoplasmacytoid cell, B2 cells (Follicular and marginal zone B-cells, B1 cells and Breg cells", background_color='white')],
                     [sg.Text("", background_color='white')],
                     [sg.Text("", background_color='white')],
                     [sg.Image(r'C:\Users\User\PycharmProjects\GUI\B-cell\Bcelltypessmall.png', background_color='white')]
                        ]


    column1_cd8tcell = [[sg.Text("", background_color='white')],
                    [sg.Text( "CD8 cytotoxic T-cell is a lymphocyte subset which breaks down infected or cancerous cells by detecting foreign or abnormal", background_color='white')],
                     [sg.Text("antigens expressed on the surface of host cells. It does this by binding its T-cell receptor to the infected cells MHC I receptors, ", background_color='white')],
                     [sg.Text("and releases cytotoxic factors, such as cytotoxins, perforin and granzymes destroying any foreign or abnormal cell", background_color='white')],
                     [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tc1small.png', background_color='white')],
                     [sg.Text("", background_color='white')] 
                     ]
    column2_cd8tcell = [[sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tc2.png', background_color='white')]]

    column1_Tcell = [[sg.Text("CD4 T helper cells play an important role in the regulation of the adaptive immune system. They do this by secreting",background_color='white')],
                     [sg.Text("cytokines which either suppress, enhance or regulate immune responses. They are essential in B-cell antibody class switching,", background_color='white')],
                     [sg.Text("activation and growth of cytotoxic T-cells and enhancing activity of phagocytes such as macrophages. APC cells present antigens", background_color='white')],
                     [sg.Text("on their MHC II receptors and can activate the Th cells via TCR. In return, the T-helper cells will aid those cells through ", background_color='white')],
                     [sg.Text("a combination of cell to cell interactions (e.g. CD40/CD40L) and cytokines. The T helper cells develope in the thymus and have", background_color='white')],
                     [sg.Text("a large variety of subtypes including Th1, Th2, Th3, Th9, Th17, Th22, Treg and Tf", background_color='white')],
                     [sg.Text("", background_color='white')],
                     [sg.Text("", background_color='white')],
                     [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Thall.png', background_color='white')]
                     ]
    column2_Tcell = [[sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th.png',background_color='white')]]
    column1_naive = [[sg.Text('Precursor T-cells for effector and memory T-cell subsets derived from the thymus',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises naive T-cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('CD45RA',key='CD45RA'),sg.Button('CCR7',key='CCR7'),sg.Button('CD62L',key='CD62L'),sg.Button('CD127',key='CD127'),sg.Button('CD132',key='CD132'),sg.Text('but does not express CD25, CD44, CD69, CD45RO, HLA-DR')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IFN-Gamma',key="IFN-Gamma"),sg.Button('TNF-Alpha',key='TNF-Alpha'),sg.Button('lymphotoxin-alpha'),sg.Button('IFN-Gamma'),sg.Button('IL-2')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CCR7',key='CCR7'),sg.Button('CD45R',key='CD45R'),sg.Button('CD62L',key='CD62L'),sg.Button('CD127',key='CD127'),sg.Button('CD132',key='CD132')],
                    [sg.Text('Differentiation factors (Th0)',text_color=('red'),background_color='white')],
                    [sg.Text('Migrates to secondary lymph nodes')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th1_Th2.png',background_color='white')]
                   ]
    column1_Th1cell = [[sg.Text('Th1 cells promote pro-inflammatory reponses and defend against intracellular bacteria,fungi and viruses.',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Th1 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('T-bet',key='T-bet'),sg.Button('CXCR1',key='CXCR1'),sg.Button('CCR5',key='CCR5'),sg.Button('Tim3',key='Tim3')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IFN-Gamma',key='IFN-gamma'),sg.Button('TNF-Alpha',key='TNF-Alpha'),sg.Button('lymphotoxin-alpha',key='lymphotoxin'),sg.Button('IFN-Gamma', key="IFN-Gamma"),sg.Button('IL-2',key='IL-2')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4',key="CD4"),sg.Button('IL-12R', key= 'IL-12R'),sg.Button('IL-18R')],
                    [sg.Text('Differentiation factors (Th0 --> Th1)',text_color=('red'),background_color='white')],
                    [sg.Button('IFN-gamma',key='IFN-Gamma'),sg.Button('IL-12', key ='IL-12 ')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th1_Th2.png',background_color='white')]
                   ]
    column1_Th2cell = [[sg.Text('Th2 cells defend against extracellular bacteria and parasites and activate B-cell antibody production.',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Th2 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('IL-1R',key='IL-1R'),sg.Button('IFN-gamma Receptor',key="IFN-Gamma"),sg.Button('CCR4',key='CCR4'),sg.Button('CCR8',key='CCR8'),sg.Button('Tim1',key='Tim1'),sg.Button('ICOS',key = 'ICOS'),sg.Button('Stat6',key='Stat6'),sg.Button('GATA-3',key='GATA3'),sg.Button('c-maf',key='cmaf')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-4',key='IL-4'),sg.Button('IL-5',key='IL-5'),sg.Button('IL-10',key='IL-10'),sg.Button('IL-13',key='IL-13'),sg.Button('IL-2',key = 'IL-2')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4',key='CD4'),sg.Button('stat6',key='stat6'),sg.Button('GATA-3',key='GATA3'),sg.Button('c-maf')],
                    [sg.Text('Differentiation factors (Th0 --> Th2)',text_color=('red'),background_color='white')],
                    [sg.Button('IL-4',key='IL-4')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th1_Th2.png',background_color='white')]
                   ]

    column1_Th3cell = [[sg.Text('Th3 cells are a regulatory T-cell subset important in intestinal immune regulation',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Th3 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('GITR'),sg.Button('c-maf'),sg.Text('no or low expression FOXP3,CD25')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('TGF-Beta',key='TGF-Beta')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4',key='CD4')],
                    [sg.Text('Differentiation factors (Th0 --> Th3)',text_color=('red'),background_color='white')],
                    [sg.Button('IL-10',key='IL-10')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th3.png',background_color='white')]
                   ]

    column1_Th9cell = [[sg.Text('T-helper 9 cells are thought to target helminth parasites')],
                    [sg.Text('The following list characterises Th9 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('IRF4'),sg.Button('PU.1'),sg.Text('no expression of CCR4')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-9')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4'),sg.Button('CCR5'),sg.Button('CD4'),sg.Button('CD4')],
                    [sg.Text('Differentiation factors (Th0 --> Th9)',text_color=('red'),background_color='white')],
                    [sg.Button('IL-9,IL-4,TGF-Beta')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th3.png',background_color='white')]
                   ]

    column1_Tfcell = [[sg.Text('Follicular B-helper T-cells are important in supporting Germinal Centre B-cells and aiding their differentiation into B-memory and plasma cells',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Tf cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('CXCR5'),sg.Button('PD-1'),sg.Button('BTLA'),sg.Button('ICOS'),sg.Button('CD40L')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-21'),sg.Button('IL-4'),sg.Button('Bcl6')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4')],
                    [sg.Text('Differentiation factors (Th0 --> Tf)',text_color=('red'),background_color='white')],
                    [sg.Button('IL-10')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tf.png',background_color='white')]
                   ]
    column1_Trcell = [[sg.Text('Regulatory helper T-cells suppress tumour immunity, maintain immune self tolerance and help prevent autoimmunity',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Treg cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('CTLA-4'),sg.Button('FOXP3'),sg.Button('GITR'),sg.Button('LAG3')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-10'),sg.Button('TGF-Beta'),sg.Button('adenosine')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4'),sg.Button('CD25'),sg.Button('CD152(CTLA-4)')],
                    [sg.Text('Differentiation factors (Th0 --> Treg)',text_color=('red'),background_color='white')],
                    [sg.Button('?')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tf.png',background_color='white')]
                   ]

    column1_Tr1cell = [[sg.Text('Type I regulatory cells regulate tolerance towards antigens of any origin. They maintain and induce peripheral tolerance and suppress tissue inflammation in autoimmunity',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Tr1 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('CD49'),sg.Button('LAG3'),sg.Button('CD226')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-10'),sg.Button('IFN-gamma'),sg.Button('IL-5'),sg.Button('TGF-Beta'),sg.Text('Does not secrete IL-2 or IL-4')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4'),sg.Button('CD49'),sg.Text('no GTR expressed and very low CTLA4 or CD25 expressed')],
                    [sg.Text('Differentiation factors (Th0 --> Tr1)',text_color=('red'),background_color='white')],
                    [sg.Button('?')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tf.png',background_color='white')]
                   ]

    column1_Th17cell = [[sg.Text('Th17 cells are related to T-reg cells. They maintain mucosal barriers, contribute to pathogen clearence and implicated in autoimmune and inflammatory disorders',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Th17 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('ROR-Gamma')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-17'),sg.Button('IL-21'),sg.Button('IL-26'),sg.Button('GM-CSF')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4'),sg.Button('ROR-gamma'),sg.Button('CCR4'),sg.Button('CCR6'),sg.Button('CD161'),sg.Text('not CXCR3')],
                    [sg.Text('Differentiation factors (naive T-cells --> Th17)',text_color=('red'),background_color='white')],
                    [sg.Button('?')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th17.png',background_color='white')]
                   ]

    column1_Th22cell = [[sg.Text('T-helper 22 cells are mainly found in the skin and play a role in wound healing and protecting epithelial barrier organs. Also linked to inflammatory diseases',font=('Helvetica', 12),background_color= 'white')],
                    [sg.Text('The following list characterises Th22 cells: ',background_color='white',font=('Helvetica', 12))],
                    [sg.Text('Expresses:',text_color=('red'),background_color='white')],
                    [sg.Button('CCR4'),sg.Button('CCR6'),sg.Button('AhR')],
                    [sg.Text('Secretes',text_color=('red'),background_color='white')],
                    [sg.Button('IL-22'),sg.Text('does not secrete IFN-gamma, IL-4 or IL-17')],
                    [sg.Text('Markers',text_color= 'red',background_color='white')],
                    [sg.Button('CD4'),sg.Button('ROR-gamma'),sg.Button('AhR'),sg.Button('CCR4'),sg.Button('CCR6'),sg.Button('CCR10'),sg.Button('PDGFR')],
                    [sg.Text('Differentiation factors (Th0 --> Treg)',text_color=('red'),background_color='white')],
                    [sg.Button('?')],
                    [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Tf.png',background_color='white')]
                   ]
    column1_NKcell = [[sg.Text("Natural Killer cells are a a type of cytotoxic lymphocyte critical to the innate immune system. The role NK cells are analogous ot that of the cytotoxic T-cell in adaptive immune responses.", background_color='white')],
                      [sg.Text("NK cells provide rapid responses to virus infected cells, acting at around 3 days after infection and respond to tumour formation. Typically immune cells detect teh MHC presented on infected cell surfaces,", background_color='white')],
                      [sg.Text(", however NK cells are unique as they have the ability to recognise stressed cells in the absence of antibodies and MHC, allowing for a much faster immune reaction.", background_color='white')],
                      [sg.Text("They were named natural killer cells because of the initial notion that they do not require activation to kill cells that are missing self markers of MHCI", background_color='white')],
                      [sg.Text("This role is especially important because harmful cells that are missing MHC1 cannot be detected and destroyed by other immune cells, such a T-cells.", background_color='white')],
                      [sg.Text("NK cells are known to differentiate and mature in bone marrow, lymph nodes, spllen, tonsils and thymus,where they enter into circulation.", background_color='white')],
                      [sg.Text("", background_color='white')],
                      [sg.Text("Natural Killer T cells share properties of both NK and T-cells. Many of these cells recognise non-polymorphic CD1d molecule, an antigen-presenting molecule that binds self and foreign lipids and glycolipis.", background_color='white')],
                      [sg.Text("They constitute only approx 0.1% of all blood T-cells and should not be confused with natural killer cells. NKT cells be divided into three groups, TypeI NKT, Type II NKT and NKT-like cells. ", background_color='white')],
                      [sg.Text("Type I: classical NKT or invariant NKT, Type II: non-classical NKT or diverse NKT, Type III: NK1.1 T-cells or CD3/CD56 T-cells ", background_color='white')],
                      [sg.Text("something", background_color='white')],
                      [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\NK\NK.png', background_color='white')],
                      [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\NK\NKT.png', background_color='white')]
                      ]
    column2_NKcell = [[sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th.png', background_color='white')]]

    # Immunology definitions - Cytokines, chemokines and Transcription factors

    CD4 = "CD4 (cluster of differentiation 4, is a glycoprotein found on the surface of immune cells such as T-helper cells, monocytes, macrophages and dendritic cells. The CD4 is a coreceptor of the T cell receptor (TCR) and assists the latter in communicating with antigen-presenting cells. The TCR complex and CD4 each bind to distinct regions of the antigenpresenting MHC II molecule."
    Tbet = "A transcription factor that controls the expression of IFN-gamma in Th1 and natural killer cells"
    CCR5 = "C-C chemokine receptor type 5 or CD195, is a G protein-coupled receptor on the surface of white blood cells. CCR5 ligands include CCL3(MIP1-alpha), CCR4(MIP1-Beta), CCL3L1, CCL5(RANTES). CCR5 is predominantly on T-cells, macrophages, dendritic cells, eosinophils and microglia"
    IFNGamma = "Interferon gamma (IFN-gamma), is a pro-inflammatory cytokine that is critical for innate and daptive immunity against viral, intracellular bacteria and protozoal infections. It is an important activator of macrophages and inducer of MHCII molecules. Overexpression of this cytokine can lead a number of inflammatory and autoimmune diseases. It is produced by NK, NKT, Th1,cytotoxic T-cells amongst othersIt binds to IFNG receptor 1 and 2."
    TNFAlpha = "Tumour necorsis factor alpha (TNF-Alpha)is an inflammatory cytokine produced by activated Macrophages, CD4 lymphocytes, NK cells, neutrophils, mast cells, eosinophils and neurons. It is a endogenous pyrogen which is able to induce fever, apoptotic cell death,cachexia and inflammation. In addition it inhibits tumourigenesis and viral replication and responds to sepsis via IL-1 and IL-6 producing cells. Dysregulation of TNF production has been implicated in a variety of diseases including Alzheimers, cancer, major depression, psoriasis and inflammatory bowel disease. It binds to two types of receptors, TNFR1(CD120a) and TNFR1(CD120b) "
    IL12R = "IL-12 receptor binds IL-12 cytokine which is stimulates the growth and function of T-cells and enhances the cytotoxicity of NK and cytotoxic CD8 T-cells."
    IL12 = "IL-12 is a cytokine which stimulates the growth and function of T-cells and is involved in the differentiation of naive T-cells into Th1 cells. IL-12  enhances cytotoxic activity of NK and CD8 cytotoxic T-cells. In addition Il-12 has been shown to reduce angiogenesois(blocking the formation of new blood cells. This cytokine is secreted by dendritic cells, macrophages, neutrophils and human B-lymphoblastoid cells"
    CXCR1 = "CXCR1 or IL-8-alpha or CD181 receptor is a chemokine receptor which binds to IL8 with great affinity. It is produced by Macrophages and endothelial cells"
    Tim3 = "Tim3 (T-cell immunoglobulin and mucin-domain containing-3) is a protein encoded by the HAVCR2 gene. It is expressed on cells like Th17, Treg,dendritic cells, NK cells and monocytes. Its functions as an immune check point and in combination with PD-1 and LAG3, mediates CD8 cytotoxic activity.It is  a CD4 Th1-specific cell surface protein that regulates macrophage activation."
    IL18R = "Is a receptor for the proinflammatory IL-18 cytokine which is predominantly produced by macrophages. IL-8 is shown to induce cell mediated immunity in response to bacterial antigens. "
    IL2 = "IL-2 is a pro-inflammatory cyokine with a variety of functions with the immune system, tolerance and immunity, primarily via its effects on T-cells. It aids in preventing autoimmunity by promoting the differentiation of immature T-cells into T-regulatory cells. IL-2 also promotes the differentiation of T-cells into effector T-cells and memory T-cells once the initial T-cells has been stimulated by antigens, thus helping the body fight of infections. The IL-2 binds to IL-2R which consists of CD25, CD122 and CD132. "
    lymphotoxin = "Lymphotoxin or TNF-Beta is an anti-inflammatory cytokine prodcued by lymphocytes and causes cellular destruction of tumour cell lines. It is involved in the regulation of cell survival, proliferation, differentiation and apoptosis."
    CD45L = "CD45L is expressed on B-cells and subsets of T and NK cells. It binds to CD45 which is a signalling molecule involved in regulating a variety of cellular process including cell growth, differentiation,mitotic cycle and oncogenic transformation."
    CCR7 = "CCR7 or CD197, is a receptor expression on a variety of lymphocytes and activates B and T-cells. It binds to CCR7, whcih is involved to stimulate dendritic cell maturation, the homing of T-cells to various secondary lymphoid organs as well of trafficking T-cells within the spleen."
    CD62L = "CD62L or L-selectin, is an adhesion molecule found on leukocytes and plays an important function between lymphocyte-endothelial interactions. CD62L acts as a homing receptor for lymphocytes to enter secondary lymphoid tissue from blood vessels"
    CD127 = ""
    CD132 = 'CD132 or common gamma chain or IL2-RG is a cytokine expressed on most lymphocytes populations. It is thought to direct the growth and maturation of T-cells, B-cells and NK cells. '
    IL1R = "IL1-R is the receptor of pro-inflammatory cytokine IL-1 which is produced by macrophages, monocytes, fibroblasts,dendritic cells and also expressed by B-cells, NK cells, microglia and epithelial cells. They form an important part of the inflammatory response of the body against infection."
    CCR4 = "CCR4 or CD194"
    CCR8 = "CCR8's role is to regulate the chemotaxis of monocytes, thymic cell apoptosis and psotioning of activated Tcells within antigenic challenge sites and specialised areas of lymphoid tissues"
    ICOS = "ICOS (Inducible T-cell costimulator) or CD278, is a costimulatory molecule that is expressed on activated T-cells, especially important of Th2 cells"
    Stat6 = "Signal transducer and activator of transcription 6, plays a role in in exerting IL-4 mediated biological responses and associated with anti-apoptotic activity. Thought to aid in the differentiation of Th2 cells"
    GATA3 = "GATA-3 is a transcription factor which has a wide variety of biological responses including inflammatory and humoral iimune responses and the proper functioning of endothelial cells in blood vessels. GATA-3 specifically promotes the secretion of IL-4,IL-5 and IL-13 from Th2 cells and all three of these interleukins serve to promote allergic responses."
    IL4 = "IL-4 is an anti-inflammatory cytokine which induces differentiation of naive Th0 cells to Th2 cells. After activation bu IL-4, Th2 cells subsequently produce additional IL-4 in a positive feedback loop.The cell that initially produces the IL-4, thus inducing Th2 differentiation has not been identified yet,but some studies indicate it could be Basophils. In addition, IL-4 stimulates the activated B-cell and T-cell proliferation, and the differentiation of B-cells into plasma cells. Il-4 decreases the production of Th1 cells, macrophages, IFN-gamma and denritic cell IL-12."
    IL5 = "IL-5 is an anti-inflammatory cytokine produced by Th2 and mast cells. Once bound to IL-5R, it stimulates B-cell growth and increases antibody secretion, primarily IgA. IL-5 has long been associated several allergic diseases including asthma and rhinitis"
    IL10 = "IL-10 is an anti-inflammatory cytokine which downregulates the expression of Th1 cytokines, MHC class II and co-stimulatory molecules on macrophages. It also enhances B-cell survival, proliferation and antibody production. IL-10 can block NF-kB, suppresscytokine secretion, antigen presentation and CD4 T cell activation. More specifically, IL-10 inhibits LPS and inhibit the synthesis of pro-inflammatory cytokines, TNF-alpha, IL-1-Beta, IL-12, IL-2, IL-3 and GM-CSF produced by cells such as macrophages and Th1 cells. IL-10 stimulates B-cell maturation and antibody production."
    IL13 = "IL-13 is an anti-inflammatory cytokine secreted by Th2, NKT, mast, eosinophil and nuocytes. IL-13 regulates IgE synthesis, goblet cell hyperplasia, mucus hypersecretion, airway hyperres;onsivenewss and fibrosis. It is mediator of allergic inflammation and different diseases including asthma.  "
    CCL2 = "CCL2 or MCP-1 recruits monocytes, memory T-cells and dendritic cells to the sites of inflammation produced by either tissue injury or infection"
    CCL4 = "CCL4 or MIP-1 is produced by neutrophils, monocytes, B-cells, T-cells, fibroblasts, endothelial cells and epithelial cells. Its main function is to act as a chemoattractant for NK, monocytes and a variety of other immune cells"
    CCL5 = "CCL5 or RANTES is chemotactic for T-cells, eosinophils and basophils and plays an active role in recruiting leukocytes into inflammatory sites"

    tab3_layout = [[sg.T()]]
    tab4_layout = [[sg.T()]]
    tab5_layout = [[sg.T()]]
    tab6_layout = [[sg.T()]]
    tab7_layout = [[sg.T()]]
    tab8_layout = [[sg.T()]]

    # NKT cells

    NK_layout = [[(sg.Column(column1_NKcell, size=(800, 600), background_color='white', scrollable=True)),
                    sg.Column(column2_NKcell, size=(800, 600), background_color='white', scrollable=True)
                    ]]
    NK1_layout = [[sg.T()]]
    NK2_Layout = [[sg.T()]]
    NKT1_Layout = [[sg.T()]]
    NKT2_Layout = [[sg.T()]]

    # T-cell sub Tab menu
    macrophage_layout = [[(sg.Column(column1_Macrophage, size=(1400, 600), background_color='white', scrollable=True))

                    ]]
    th_overview = [[(sg.Column(column1_Tcell, size=(800, 600), background_color='white', scrollable=True)),
                    sg.Column(column2_Tcell, size=(800, 600), background_color='white', scrollable=True)
                    ]]
    naive_layout = [[sg.Column(column1_naive, size=(1400, 600), background_color='white', scrollable=True)]]
    th1_layout = [[sg.Column(column1_Th1cell, size=(1400, 600), background_color='white', scrollable=True)]]
    th2_layout = [[sg.Column(column1_Th2cell, size=(1400, 600), background_color='white', scrollable=True)]]
    th3_layout = [[sg.Column(column1_Th3cell, size=(1400, 600), background_color='white', scrollable=True)]]
    th9_layout = [[sg.Column(column1_Th9cell, size=(1400, 600), background_color='white', scrollable=True)]]
    tf_layout = [[sg.Column(column1_Tfcell, size=(1400, 600), background_color='white', scrollable=True)]]
    treg_layout = [[sg.Column(column1_Trcell, size=(1400, 600), background_color='white', scrollable=True)]]
    tr1_layout = [[sg.Column(column1_Tr1cell, size=(1400, 600), background_color='white', scrollable=True)]]
    th17_layout = [[sg.Column(column1_Th17cell, size=(1400, 600), background_color='white', scrollable=True)]]
    th22_layout = [[sg.Column(column1_Th22cell, size=(1400, 600), background_color='white', scrollable=True)]]

    # B-cell sub tab menu
    co_overview = [
    [(sg.Column(column1_cd8tcell, size=(800, 600), background_color='white', scrollable=True)),
     (sg.Column(column2_cd8tcell, size=(800, 600), background_color='white', scrollable=True))
     ]]

    b_overview = [

        [(sg.Column(column1_Bcell, size=(1400, 600), background_color='white', scrollable=True))
         ]]
    nb_layout = [[sg.T()]]
    ib_layout = [[sg.T()]]
    pb_layout = [[sg.T()]]
    ab_layout = [[sg.T()]]
    mb_layout = [[sg.T()]]
    b1_layout = [[sg.T()]]
    mzb_layout = [[sg.T()]]
    rb_layout = [[sg.T()]]
    fb_layout = [[sg.T()]]

    nk_layout = [

        [(sg.Column(column1_NKcell, size=(1400, 600), background_color='white', scrollable=True))

         ]]
    c_layout = [[sg.T()]]

    # B-cell layout
    layout_B = [
        [sg.TabGroup([[sg.Tab('B-Cell Overview', b_overview),
                       sg.Tab('naive B-cells', nb_layout),
                       sg.Tab('immature B-cells', ib_layout),
                       sg.Tab('plasma B-cells', pb_layout),
                       sg.Tab('activated B-cells', ab_layout),
                       sg.Tab('memory B-cells', mb_layout),
                       sg.Tab('B1 cells', b1_layout),
                       sg.Tab('marginal zone B-cells', mzb_layout),
                       sg.Tab('regulatory B-cells', rb_layout),
                       sg.Tab('follicular B-cells', fb_layout)]],
                     tooltip='TIP2')]
    ]

    # Helper T-cell layout
    layout_th = [
        [sg.TabGroup([[sg.Tab('Th-Cell Overview', th_overview),
                       sg.Tab('Naive T-cells', naive_layout),
                       sg.Tab('T-Helper 1', th1_layout),
                       sg.Tab('T-helper 2', th2_layout),
                       sg.Tab('T-helper 3', th3_layout),
                       sg.Tab('T-helper 9', th9_layout),
                       sg.Tab('Th-follicular', tf_layout),
                       sg.Tab('Th-regulatory', treg_layout),
                       sg.Tab('Type I -regulatory', tr1_layout),
                       sg.Tab('T-helper 17', th17_layout),
                       sg.Tab('T-helper 22', th22_layout)]],
                     tooltip='TIP2')],
    ]

    layout_tc = [
        [sg.TabGroup([[sg.Tab('Cytotoxic T-cells Overview', co_overview),
                       sg.Tab('Cytotoxic T-cells alpha/Beta', c_layout),
                       sg.Tab('Cytotoxic T cells gamma/sigma', c_layout),
                       sg.Tab('Cytotoxic CD1 T-cells', c_layout),
                       ]],
                     tooltip='TIP2')],
    ]

    layout_nk = [
        [sg.TabGroup([[sg.Tab('NK and NKT overview', nk_layout),
                       sg.Tab('NK 1.1', NK1_layout),
                       sg.Tab('NK 1.2', NK2_Layout),
                       sg.Tab('Type I NKT', NKT1_Layout),
                       sg.Tab('Type II NKT', NKT2_Layout),
                       sg.Tab('NKT-like cells', NKT2_Layout),
                       ]],
                     tooltip='TIP2')],
    ]

    immunology_overview_column1 = [[sg.Text("", background_color='white')],
                    [sg.Text("Innate Immune System",font = ("Helvetica",15), background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("The major functions of the innate immune system include: ,", background_color='white')],
                    [sg.Text("1. The production of cytokines to recruit immune cells to area of infection", background_color='white')],
                    [sg.Text("2. Activation of the complement cascade to identify bacteria", background_color='white')],
                    [sg.Text("   and activate cells and promote clearance of antibody complexes", background_color='white')],
                    [sg.Text("3. Identify and remove foreign substances present in organs, blood ", background_color='white')],
                    [sg.Text("   and tissues by specialised white blood cells", background_color='white')],
                    [sg.Text("4. Activation of adaptive immune system through antigen presentation", background_color='white')],
                    [sg.Text("5. Using physical barriers such as skin, mucus and blood brain barrier", background_color='white')],
                    [sg.Text("   to keep out pathogens", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("Innate leukocytes or white blood cells include the following:", background_color='white')],
                    [sg.Text("1. Mast cells - wound healing and defense against pathogens", background_color='white')],
                    [sg.Text("2. Macrophages - Derived from monocytes, most efficient phagocytes.", background_color='white')],
                    [sg.Text("3. Neutrophils - Most abundant phagocytes, release toxins to kill", background_color='white')],
                    [sg.Text("                  bacteria and fungi", background_color='white')],
                    [sg.Text("4. Dendritic cells - are phagocytes located mainly in skin and", background_color='white')],
                    [sg.Text("                  the mucosal lining. Serve as a link between the", background_color='white')],
                    [sg.Text("                  innate and adaptive immune system", background_color='white')],
                    [sg.Text("5. Basophils and Eosinophils - related to neutrophils, important in", background_color='white')],
                    [sg.Text("                   the defense against parasites", background_color='white')],
                    [sg.Text("6. Natural Killer cells - Destroys tumour cells and virus infected ", background_color='white')],
                    [sg.Text("                      host cells.", background_color='white')],
                    [sg.Text("7. gamma/delta T cells - Are both innate and adaptive immune cells", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("Adaptive immune system", font = ("Helvetica",15), background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("The adaptive immune system also known as aquired immune system, is ", background_color='white')],
                    [sg.Text("composed of highly specialised, systemic cells and processes that", background_color='white')],
                    [sg.Text("eliminate pathogens or prevent their growth.", background_color='white')],
                    [sg.Text("The main functions of the adaptive immune system includes:", background_color='white')],
                    [sg.Text("1. Recognising self and non-self during process of antigen recognition", background_color='white')],
                    [sg.Text("2. Generation of reponses tailored to eliminate specific pathogens and", background_color='white')],
                    [sg.Text("   cells infected with pathogens", background_color='white')],
                    [sg.Text("3. Development of immunological memory through memory B cells and T cells ", background_color='white')],[sg.Text("", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("The following cells are associated with the adaptive immune system:", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("1. CD8 cytotoxic T-cells - kills infected cells", background_color='white')],
                    [sg.Text("2. CD4 helper T-cells - Regulate the adaptive immune system, long term memory", background_color='white')],
                    [sg.Text("3. Gamma delta T-cells", background_color='white')],
                    [sg.Text("4. B-cells - produce antibodies and form B-memory cells", background_color='white')],[sg.Text("", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("", background_color='white')],
                    [sg.Text("", background_color='white')],

                    [sg.Text("", background_color='white')]

                        ]
    immunology_overview_column2 = [[sg.Text("", background_color='white')],
                                   [sg.Image(r'C:\Users\User\PycharmProjects\GUI\immunology.png',
                                             background_color='white')],
                                   [sg.Text("", background_color='white')],
                                   [sg.Text("Adaptive Immune System",font = ("Helvetica",15),background_color='white')],
                                   [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\overview.png',
                                             background_color='white')],
                                   [sg.Text("", background_color='white')],
                                   [sg.Text("T-cell subtypes", background_color='white')],
                                   [sg.Image(r'C:\Users\User\PycharmProjects\GUI\B-cell\Tc1small.png',
                                             background_color='white')],
                                   [sg.Text("", background_color='white')],
                                   [sg.Text("B-cell subtypes", background_color='white')],
                                   [sg.Image(r'C:\Users\User\PycharmProjects\GUI\B-cell\Bcelltypessmall.png',
                                             background_color='white')],
                                   [sg.Text("", background_color='white')],
                                   [sg.Text("", background_color='white')],

                                   ]
    immunology_overview = [
        [(sg.Column(immunology_overview_column1, size=(500, 600), background_color='white', scrollable=True)),
         (sg.Column(immunology_overview_column2, size=(1100, 600), background_color='white', scrollable=True))

         ]]


    # Immunology layout
    layout_Immunology = [[sg.Button('Menu',key='menu')],

                         [sg.TabGroup([[sg.Tab('Immunology', immunology_overview),
                                        sg.Tab('Th-cell', layout_th),
                                        sg.Tab('Tc-cell', layout_tc),
                                        sg.Tab('B-cell', layout_B),
                                        sg.Tab('NK Cell', layout_nk),
                                        sg.Tab('Macrophages', macrophage_layout),
                                        sg.Tab('Dendritic cells', dend_layout),
                                        sg.Tab('Neutrophils', tab5_layout),
                                        sg.Tab('cytokines', tab6_layout),
                                        sg.Tab('Chemokines', tab7_layout)]],
                                      tooltip='TIP2')],
                         ]
    immunology_window = sg.Window('Immunology', layout_Immunology, size=(1500, 800), grab_anywhere=False)
    title_window.Hide()

    while True:
        event2, value2 = immunology_window.Read()
        if event2 is None or event2 == 'Exit':
            immunology_window.Close()
            title_window.UnHide()
            break
        elif event2.startswith('menu'):
            menu()
        elif event2.startswith('CD4'):
            popup_scrolled(CD4)
        elif event2.startswith('T-bet'):
            popup_scrolled(Tbet)
        elif event2.startswith('CCR5'):
            popup_scrolled(CCR5)
        elif event2.startswith('TNF-Alpha'):
            popup_scrolled(TNFAlpha)
        elif event2.startswith('IFN-Gamma'):
            popup_scrolled(IFNGamma)
        elif event2.startswith('IL-12R'):
            popup_scrolled(IL12R)
        elif event2.startswith('IL-12'):
            popup_scrolled(IL12)
        elif event2.startswith('CXCR1'):
            popup_scrolled(CXCR1)
        elif event2.startswith('Tim3'):
            popup_scrolled(Tim3)
        elif event2.startswith('IL-18R'):
            popup_scrolled(IL18R)
        elif event2.startswith('IL-2'):
            popup_scrolled(IL2)
        elif event2.startswith('lymphotoxin-Alpha'):
            popup_scrolled(lymphotoxin)
        elif event2.startswith('CD45R'):
            popup_scrolled(CD45L)
        elif event2.startswith('CCR7'):
            popup_scrolled(CCR7)
        elif event2.startswith('CD62L'):
            popup_scrolled(CD62L)
        elif event2.startswith('CD127'):
            popup_scrolled(CD127)
        elif event2.startswith('CD132'):
            popup_scrolled(CD132)
        elif event2.startswith('IL-1R'):
            popup_scrolled(IL1R)
        elif event2.startswith('CCR4'):
            popup_scrolled(CCR4)
        elif event2.startswith('IL-4'):
            popup_scrolled(IL4)
        elif event2.startswith('IL-5'):
            popup_scrolled(IL5)
        elif event2.startswith('IL-10'):
            popup_scrolled(IL10)
        elif event2.startswith('IL-13'):
            popup_scrolled(IL13)
        elif event2.startswith('CCL2'):
            popup_scrolled(CCL2)
        elif event2.startswith('CCL4'):
            popup_scrolled(CCL4)
        elif event2.startswith('CCL5'):
            popup_scrolled(CCL5)

#=============================================================================================================================
#----------GENOMICS----------GENOMICS----------GENOMICS----------GENOMICS----------GENOMICS----------GENOMICS----------GENOMICS
#==============================================================================================================================


def genomics():
    title_window.Hide()

    def rnaprepss():

        prep1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide1.png')
        prep2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide2.png')
        prep3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide3.png')
        prep4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide4.png')
        prep5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide5.png')
        prep6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide6.png')

        shows = [slide0, prep1, prep2, prep3, prep4, prep5, prep6]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(600, 450),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def rnaseqss():

        seq1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide1.png')
        seq2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide2.png')
        seq3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide3.png')
        seq4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide4.png')
        seq5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide5.png')
        seq6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide6.png')
        seq7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide7.png')
        seq8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide8.png')
        seq9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide9.png')
        seq10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide10.png')
        seq11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide11.png')
        seq12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide12.png')
        seq13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide13.png')
        seq14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide14.png')
        seq15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide15.png')
        seq16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide16.png')
        seq17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide17.png')
        seq18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide18.png')
        seq19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide19.png')
        seq20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide20.png')
        seq21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide21.png')
        seq22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide22.png')
        seq23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide23.png')
        seq24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide24.png')
        seq25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide24.png')

        shows = [slide0, seq1, seq2, seq3, seq4, seq5, seq6, seq7, seq8, seq9, seq10, seq11, seq12, seq13, seq14, seq15,
                 seq16, seq17, seq18, seq19, seq20, seq21, seq22, seq23, seq24, seq25]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(600, 450),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def rnaalignss():

        align1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign1.png')
        align2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign2.png')
        align3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign3.png')
        align4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign4.png')
        align5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign5.png')
        align6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign6.png')
        align7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign7.png')
        align8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign8.png')
        align9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign9.png')

        shows = [slide0, align1, align2, align3, align4, align5, align6, align7, align8, align9]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(600, 450),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def rnaanalss():

        anal1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal1.png')
        anal2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal2.png')
        anal3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal3.png')
        anal4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal4.png')
        anal5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal5.png')
        anal6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal6.png')
        anal7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal7.png')

        shows = [slide0, anal1, anal2, anal3, anal4, anal5, anal6, anal7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(600, 450),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def crisprss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide35.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide36.png')


        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,36]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def transcriptionss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide30.png')


        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def ss2part1():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide35.png')



        showsx = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,
                 c31,c32,c33,c34,c35]

        layout = [

            [sg.Image(data=showsx[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Transcription', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = showsx[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def ss2part2():


        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide41.png')
        c42 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide42.png')
        c43 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide43.png')
        c44 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide44.png')
        c45 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide45.png')
        c46 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide46.png')
        c47 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide47.png')
        c48 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide48.png')
        c49 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide49.png')
        c50 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide50.png')
        c51 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide51.png')
        c52 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide52.png')
        c53 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide53.png')
        c54 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide54.png')
        c55 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide55.png')
        c56 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide56.png')
        c57 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide57.png')
        c58 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide58.png')
        c59 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide59.png')
        c60 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide60.png')
        c61 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription2\Slide61.png')


        showsx = [slide0, c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61]

        layout = [

            [sg.Image(data=showsx[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Transcription', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = showsx[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def translationss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide24.png')

        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def translationss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide24.png')

        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)


    def transcriptome1():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide35.png')



        showsx = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,
                 c31,c32,c33,c34,c35]

        layout = [

            [sg.Image(data=showsx[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Transcription', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = showsx[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def transcriptome2():

        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome2\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide41.png')
        c42 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide42.png')
        c43 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide43.png')
        c44 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide44.png')
        c45 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide45.png')
        c46 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide46.png')
        c47 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide47.png')
        c48 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide48.png')
        c49 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide49.png')
        c50 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide50.png')
        c51 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide51.png')
        c52 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide52.png')
        c53 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide53.png')
        c54 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide54.png')
        c55 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide55.png')
        c56 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Transcriptome\Slide56.png')



        showsx = [slide0, c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56]

        layout = [

            [sg.Image(data=showsx[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Transcription', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = showsx[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def mrnass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide22.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20,
                 c21, c22]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)


    def trnass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide19.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide20.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide21.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\tRNA\Slide22.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20,
                 c21, c22,c23,c24,c25,c26]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def rrnass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide13.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def ribosomess1():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome1\Slide20.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20,
                 ]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def ribosomess2():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide1.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide2.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide3.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide4.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide5.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide6.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide7.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide8.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide9.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide10.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide11.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide12.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide13.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide14.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide15.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide16.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide17.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide18.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide19.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20,
                 c21,c21,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def bisulfitess():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide35.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide41.png')
        c42 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide42.png')
        c43 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide43.png')
        c44 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide44.png')
        c45 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide45.png')
        c46 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide46.png')


        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,
                 c37,c37,c39,c40,c41,c42,c43,c44,c45,c46]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def polyss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide35.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\Polyadenylation\Slide41.png')

        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,
                 c37,c37,c39,c40,c41]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def mirnass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAn\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide35.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide41.png')

        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,
                 c37,c37,c39,c40,c41]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('miRNA', layout,
                           size=(1250, 820),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def mir2():

        c42 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide42.png')
        c43 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide43.png')
        c44 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide44.png')
        c45 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide45.png')
        c46 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide46.png')
        c47 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide47.png')
        c48 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide48.png')
        c49 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide49.png')
        c50 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide50.png')
        c51 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide51.png')
        c52 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide52.png')
        c53 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide53.png')
        c54 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide54.png')
        c55 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide55.png')
        c56 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide56.png')
        c57 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide42.png')
        c58 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide43.png')
        c59 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide44.png')
        c60 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide45.png')
        c61 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide46.png')
        c62 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide47.png')
        c63 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide48.png')
        c64 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide49.png')
        c65 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide50.png')
        c66 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide51.png')
        c67 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide52.png')
        c68 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide53.png')
        c69 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide54.png')
        c70 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide55.png')
        c71 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide46.png')
        c72 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide47.png')
        c73 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide48.png')
        c74 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide49.png')
        c75 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide50.png')
        c76 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide51.png')
        c77 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide52.png')
        c78 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide53.png')
        c79 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide54.png')
        c80 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide55.png')



        showsx = [slide0,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,
                  c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80]

        layout = [

            [sg.Image(data=showsx[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Transcription', layout,
                           size=(1250, 820),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = showsx[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(showsx) - 1)  # add 1 until the last one
                show = showsx[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def mirregss():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide28.png')
        c29 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide29.png')
        c30 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide30.png')
        c31 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide31.png')
        c32 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide32.png')
        c33 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide33.png')
        c34 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide34.png')
        c35 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide35.png')
        c36 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide36.png')
        c37 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide37.png')
        c38 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide38.png')
        c39 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide39.png')
        c40 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide40.png')
        c41 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide41.png')
        c42 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide42.png')
        c43 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide43.png')
        c44 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide44.png')
        c45 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide45.png')
        c46 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide46.png')
        c47 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide47.png')
        c48 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide48.png')
        c49 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide49.png')
        c50 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide50.png')
        c51 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide51.png')
        c52 = (r'C:\Users\User\PycharmProjects\GUI\RNA\miRNAreg\Slide52.png')

        shows = [slide0, c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,
                 c37,c37,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('miRNA', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def circrnass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide15.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    # GIFs-----------------------------------------------------------------------------------------------------------------------------


    bisulfite = (r'C:\Users\User\PycharmProjects\GUI\RNA\bisulfitegif.gif')
    CRISPR1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR1.gif')
    CRISPR2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR2.gif')
    CRISPR3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR3.gif')
    CRISPR4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR4.gif')
    splicing = (r'C:\Users\User\PycharmProjects\GUI\RNA\DNAtranscriptionandtranslation.gif')

    # Slide show Pics -------------------------------------------------------------------------------------------------------------------------------------------------------------
    prep1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide1.png')
    prep2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide2.png')
    prep3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide3.png')
    prep4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide4.png')
    prep5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide5.png')
    prep6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq preparation\rnaprep1slide6.png')

    seq1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide1.png')
    seq2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide2.png')
    seq3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide3.png')
    seq4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide4.png')
    seq5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide5.png')
    seq6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide6.png')
    seq7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide7.png')
    seq8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide8.png')
    seq9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide9.png')
    seq10 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide10.png')
    seq11 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide11.png')
    seq12 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide12.png')
    seq13 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide13.png')
    seq14 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide14.png')
    seq15 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide15.png')
    seq16 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide16.png')
    seq17 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide17.png')
    seq18 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide18.png')
    seq19 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide19.png')
    seq20 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide20.png')
    seq21 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide21.png')
    seq22 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide22.png')
    seq23 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide23.png')
    seq24 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide24.png')
    seq25 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq workings\RNAworkslide24.png')

    align1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign1.png')
    align2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign2.png')
    align3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign3.png')
    align4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign4.png')
    align5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign5.png')
    align6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign6.png')
    align7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign7.png')
    align8 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign8.png')
    align9 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNA seq alignment\RNAseqalign9.png')

    anal1 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal1.png')
    anal2 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal2.png')
    anal3 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal3.png')
    anal4 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal4.png')
    anal5 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal5.png')
    anal6 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal6.png')
    anal7 = (r'C:\Users\User\PycharmProjects\GUI\RNA\RNAseq analysis\RNAseqanal7.png')

    # Genomics Definitions

    ssu = 'The small 40S ribosomal subunit. Most of the decoding related functions of the ribosome happens on the smaller SSU of the ribosome which includes: 1.) The A Site: where the tRNA-binding site for incoming amino-acyl-tRNA, 2.) The P Site: the peptidyl tRNA (where amino acids are attached and formed into a polypeptide),  3.) E site: the outbound deacylated tRNA and 4.) mRNA interface'
    lsu = 'The large 60S ribosomal subunit contains the peptidyl transferase center responsible for the polymerisation of amino acids and as well as surfaces required for handling the nascent polypeptide.'
    ribosome = 'The ribosome is a large protein complex (80S), that serves the site of biological protein synthesis (translation). The ribosome links amino acids together in a polypeptide in the order specified by mRNA molecules. It consists of two major components: the small ribosomal subunits (SSU) which read the mRNA, and the large subunits, which join amino acids to form a polypeptide chain. Each subunit consists of one or more rRNA molecules and a variety of ribosomal proteins'
    aminoacyltrna = 'Amino-acyl tRNA is a chemically bonded tRNA bound to an amino acid which delivers it to the ribosome for incorporation into a polypeptide chain that is being produced. A specific cognate amino acid is charged or aminoacylated to each tRNA by aminoacyl tRNA synthetase. The matching is crucial, since it ensures that only the particular acid matching the anticodon of the tRNA, and in turn matching the codon of the mRNA, is ued in protein synthesis.'
    peptidyltrna = 'P-site is the second binding site for the tRNA in the ribosome. During protein translation, the P-site holds the tRNA which is linked to the growing polypeptide chain. When a stop codon is reached, the peptidyl tRNA bond of the tRNA located in the P-site, is cleaved releasing the newly synthesised protein.'
    deactivatedtrna = 'The E-site is the third and final binding site for tRNA in the ribosome during protein sysnthesis'
    peptidyltransferase = 'Peptidyl transferase is an aminoacyltransferase as well as the primary enzymatic function of the ribosome, which forms the peptide bonds between adjacent amino acids using tRNAs during the translation process of protein biosynthesis. The substrates for the peptidyl transferase reaction are two tRNA molecules, one bearing the growing polypeptide chain and the other bearing the amino acid that will be added to the chain. In other words, Peptidyl transferase is an enzyme that catalyes teh addition of an amino acid residue in order to grow the polypeptide chain in protein synthesis. It is composed almost entirely of RNA and is located in the large ribosomal subunit, where it catalyses teh peptide bond formation.'
    polymerisation = 'DNA polymerisation is the synthesis of replicating a DNA molecule from free nucleotides via a catalytic enzyme i.e. DNA Polymerase'
    circrna = 'CircRNAs are a non-polyadenylated covalent closed continous RNA loop which is composed of 1 - 6 exons and is resistant to exonuclease degradation. It is thought to have several functions including 1.) as a miRNA sponge, 2.) miRNA/RNA-binding protein delivery vechicle, 3.) assemble RNA-binding protein factories, 4.) to be a regulator of mRNA expression, 5.) a RNA-binding protein sponge, 6.) a regulator of RNA-binding protein function and 7.) an mRNA template for translation. '
    suncellularlocalisation = 'Subcellular localisation refers to inner cell compartments such as cytoplasm, nucleus, mitochondria, ER, golgi apparatus inside Eukaryote cells'
    directionalsequencing = 'Directional sequencing or also known as Sanger Sequencing, is a method of DNA sequencing based on the selective incorporation of chain terminating dideoxynucleotides by DNA polymerase during invitro DNA replication'
    ribosome40s = 'Small ribosomal subunit'
    ribosome60s = 'Large ribosomal unit'
    ribosome80S = 'Whole ribosome complex'
    polysomeprofiling = 'Polysome profiling is a technique in molecular biology that is used to study the association of mRNAs with ribosomes. The procedure begins by making a cell lysate of interest. The lysate contains polysomes (two or more ribosomes bound to a single mRNA), monosomes(one ribosome residing on a mRNA),SSU (40S subunits), LSU(60S subunits) and free mRNA and a host of other soluble cellular components. The procedure works by producing a continous sucrose gradient (e.g. 15-45%) and then in order to seperate the components of the lysate, the preparation is subjected to centrifugation. The small (40S) subunits travel further than the larger ones (60S), and the 80S and polysomes travel the furthest down the gradient.'
    differentialpolyadenylation = 'Differential polyadenylation is a widespread mechanism in higher eukaryotes producing mRNAs with different 3` ends in different contexts. This involves several alternative polyadenylation sites in the 3`UTR, each with its specific strength.'
    proximalpeak = 'The proximal peak is the closest peak of the downstream stop codon. Poly-A-tail sequencing peaks are catergorised based on their location relative to the last codon (for protein coding genes) or the longest transcript 3 end (for non-coding RNA) of known genes annotate in Ensembl. Peaks located upstream of the annotated stop codon/transcript end are termed exon or intron peaks, depending on their overlap with exonic or intronic features.'
    distalpeak = 'The distal peak is the furthest peak away from the downstream stop codon. Poly-A-tail sequencing peaks are catergorised based on their location relative to the last codon (for protein coding genes) or the longest transcript 3 end (for non-coding RNA) of known genes annotate in Ensembl. Peaks located upstream of the annotated stop codon/transcript end are termed exon or intron peaks, depending on their overlap with exonic or intronic features.'
    annotated = 'Elements which have been noted or identified, such as annotated (or identified) peaks in poly-A-tail sequencing'
    alignment = 'Gene alignment or sequencing alignment in bioinformatics, is a way of arranging the sequences of DNA, RNA or protein to identify regions of similarity taht maybe be a consequence of functional, structural or evolutionary relationships between sequences. In other words comparing or aligning sequences with a template to compare similarities or differences. For example comparing a native RNA with its mutated form to discover which nucelotides have changed'
    intronicfeatures = 'Intronic features are RNA which do not code for a protein. They are usually removed via RNA splicing to form mature mRNA'
    exonicfeatures = 'Extronic features are protein coding RNA'
    antisensepeak = 'Poly-A-tail sequencing peaks which are anti-sense are found on the opposite strand of the DNA'
    overlappingpeak = 'POly-A-tail sequencing peaks'
    geneontology = 'The study and aim to unify the representation of gene product attributes across all species. In bioinformatics this includes 1.) Maintaining and developing its controlled vocabulary of gene and gene product attributes, 2.) Annotate genes and gene products and assimilate and disseminate annotation data, 3.) Provide tools for easy access to aspects of the data provided by the project and to enable functional interpretation of experimental data fir example gene enrichment.'
    geneannotation = 'Gene annotation is the practice of capturing data about a gene product. Annotation is performed on computationally predicted genes build up from the reads that are aligned to create long transcripts. A typical output of the transcriptome study for which the genome has been sequenced, is a list of expressed known genes. Reads may provide more information regarding gene structure such as alternative transcription start sites and new exons. New genes may also be discovered and output for novel genes is typically a provision gene identifier and sequence. The user must then compare the sequence to known genes with tools like BLAST, in order to identify the function of the gene, In addition to protein coding genes, other types of novel transcripts can also be identified, such as non-coding genes. In cases where RNA-seq data represents teh first description from an organism, an automated pipeline is set up to annotate the genes. '
    Normalisation = 'Once you have an abundance of information, you can then compare groups of samples using statistical testing. Normalisation is necessary because of the possible differences in read numbers and transcriptome composition.'
    ggta = 'Genome guided transcriptome assembly is when reads are aligned to a genome, the alignments can be used for discovering new genes and splice variants'
    physicalcoverage = 'Physical coverag is the average number of times a base is read by mate paired reads, while a sequence coverage, is the average number of timesa base is read.'
    consensussequence = 'A consensus or canonical seqeunce , is a sequence of DNA, RNA or amino acids that reflects the most common choice of base or amino acid at each position. In other words, it is a calculated order of the most frequent residues, either nucleotide or amino acid found at each position in a sequence alignment.'
    canonicalsequence = 'A consensus or canonical seqeunce , is a sequence of DNA, RNA or amino acids that reflects the most common choice of base or amino acid at each position.'
    coverage = 'Coverage or depth in DNA/RNA sequencing is the number of unique reads that include a given nucelotide in the reconstructed sequence. Deep sequencing refers to the general concept of aiming high for a number of unique reads of each region of a sequence'
    exonuclease = 'Removes 3` overhangs from 3`-5`'
    ric = 'RNA interactome capture is based on the irradiation of licving cells with UV generated covalent bonds between RNA and proteins that are in direct contact with each other. Subsequently, cells are lysed under denaturing conditions and polyadenylated RNAs are isolated using oligo(dt)-coupled beads. '
    coimmuno = 'Co-immunoprecipitation is the technique of precipitating a protein antigen out of a solution using an antibody that specifically binds to that particular protein.. This process can be used to isolate and concentrate a particular protein from a sample containing many thousands of different proteins.'
    elf = 'Enriched ligated fragments involves the use of PCR to selectively enrich those DNA fragments that have adapter molecules on both ends and amplify the amount of DNA in the library.'
    mic = 'mRNA interactome capture is a protocol to enrich mRNAs and their crosslinked compatible RNA binding proteins on a global scale. It exploits the presence of 3 end polyadenylation which is a common feature of mRNAs. mRNA should be captured from the moment the poly(A) tail is added until the removal of the tail and mRNA decay.'
    flowcell = 'A part of a flow cytometer in which a stream of cells is aligned to pass one at a time through a light beam.'
    ribosomeprofiling = 'Ribsomse profiling or ribosome footprinting uses speciliased mRNA sequencing to determine which mRNAs are actively translated.'
    mrnafootprint = 'mRNA footprinting is based on the fact that a protein bound to an RNA, protects the RNA from attack by chemicals or nucleases. The portion of the RNA that is not bound by protein is accessible and therefore vunerable to attack.'
    orf = 'open reading frame is part of the reading frame that has the ability to be translated.'
    hierarchicalclustering = 'Hierarchical clustering order the rows and columns based on similarities. The row represent measurements from different genes, while the columns represent different samples.'
    rbh = "RNA binding hits are defineda s those proteins that are enriched in an irradiated samples compared to controls that have not ben irradiated but otherwis treated identically"
    pca = 'Principal component analysis is a method for compressing a lot of data into something that captures the essence of the original data. Genes with the largest variation between the cells will have the most influence on the prinipal component ie. genes highly expressed in some cells and not others will have a lot of variation and influence on the principal components. The first PC (x-axis) captures the most variation. the second PC (y-axis) captures the second most variation in the data.'
    reads = 'A read is the oligonucleotide and can map to multiple genomic positions. In sequencing, a read is an inferred sequence of base pairs corresponding to all or part of a single RNA fragment. A typical sequencing experiment involves fragmentation of the genome into millions of molecules, which are size selected and ligated to adapters.'
    readlength = 'Typical sequencers prodce read lengths in the range of 100-500 bp. Longer read lengths imporve the resolution in genome assembly and detection of structural variants,'
    readcounts = 'A read count are the number of reads that overlap at a particular genomic position.'
    garbagereads = 'Garbage reads are reads with low quality base calls or reads that are clearly artifacts of chemistry.'
    dynamics = 'The inner workings/functions of a gene or protein'
    statsig = 'Statistical significance does not translate directly to biological significance. Scientists are attracted by large changes in response to an inderpendent variable.'
    contigs = 'A set of overlapping DNA segments that together represent a consensus region of DNA'
    Allosteric = 'The regulation of an enzyme by binding an effector molecule at a site other than the enzymes active site'
    est = 'Expressed sequencing tag assembly are transcribed mRNA of a cell and only represent a subset of the whole genome. Genomes often have large amount of repetitive sequences, mainly in teh intergeneic parts (introns). Since expressed sequencing  tag assemblys represent gene transcripts, they will not contain these repeats'
    genecluster = 'A gene cluster is a part of a gene family with a group of two or more genes found within an organisms DNA that encode for similar polypeptides or proteins which collectively share a generalised function and often located within a few thousand base pairs of eachother.'
    genelength = 'In gene sequencing, longer genes will have more fragments/read counts than shorter genes if transcript expression is the same. This is adjusted by dividing the fragments per million reads by the length of the gene, resulting in the metric fragments per kilobase of transcript per million mapped reads.'
    iclip = 'iCLIP = individual-nucleotide resolution cross-linking and immunoprecipitation is a method for identifying protein-RNA interactions and uses UV light to covalently binds proteins to RNA molecules. iCLIP allows for very stringent purification of linked protein-RNA complexes using immunoprecipitation followed by SDS PAGE and transferred to nitrocellulose protein.'
    normalize = 'Normalising data is the last thing you need to do before analysing your data. This is because each sample will have a different number of reads assigend to it (from RNA sequencing), due tot eh fact that one sample might have more low quality reads or another sample might have a slightly higher concentration on the flow cell.'
    adapters = 'Ligating adapters is the process which ligates multiple indexing adapters to the ends of the DNA fragments, preparing them for hybridisation onto a flow cell'
    ligationadapters = 'This involves the ligation of multiple index adapters to the ends of the DNA fragments, preparing them for hybridisation onto the flow cell.'
    polymerase = 'fills in 5` overhangs and turns them into blunt ends.'
    adeynlation = 'The addition of one or multiple Adenosine nuceltides to the end of an mature mRNA to prohibit enzymatic degradation.'
    apa = 'Alternative polyadeylation is the process by which alternatice 3 UTR ends of an mRNA become polyadenylated. There are three classifications of APA, TypeI: Only one polyadenylation signal is present in the 3UTR, thus resulting in only one isoform, Type II: More than one polyadenylation signal is present ina common terminal axon. In this tyoe of APA, more than one resulting mRNA is produced, but with no effect on the encoded protein, however due to possible alteration of mRNA stability/translatability, other downstream effects, there may be changes to the amount of protein produced if APA signals are chosen, TypeIII: involves APA signals that are present upstream introns or exons, thus invoking alternative splicing along with APA'
    overhangs = 'In sequencing, a single A nucleotide (adenylation) is aadded to the 3 end of the blunt fragments to prevent them from ligating to each other during the ligation reaction. A corresponding single T nucleotide on the 3 end of the adapter provides a complementary overhang for ligating the adapter to the fragment.'
    bisulfitesequencing = 'In bi-sulfite sequencing it converts cytosines into uracils if unmethylated. Cytosines which are methylated, do not convert during bisulfite sequencing.'
    bisulfitetreatment = 'Bisulfite treatment of mRNA involves converting unmethylated cytosine into uracilm while methylated cytosine remains unchanged'
    methyltransferase = 'Methyltransferases are a large group of enyzmes that all methylate their substrates. Their are three main classes, 1.) Class I: Contain the Rossmanfold (bind SAM), 2.) Class II: Contain the SET domain, 3.) Class III: Are membrane associated. In addition their are differnt groups of methyltransferases: A.) Protein methyltransferases, B.) DNA/RNA methyltransferases, C.) Natural product methyltransferases, D.) Non-SAM dependent methyl transferases. SAM = S-Adenosyl methionine (which bind to the Rossmanfold)'
    postranscriptionalmodification = 'A process in which the RNA primary transcript is chemically altered following transcription froma gene to produce a mature, functional RNA molecule that can leave the nucleus and perform any variety of different functions in the cell'
    rbpwriter = 'RNA binding protein writers which post-transcriptionally modify mRNA'
    rbpreader = 'RNA binding protein which can bind and read the modified mRNA'
    rbperaser = 'RNA binding protein which remove post-transcriptional modifications'
    mrnacapping = 'Pre-mRNA capping involves the addition of m7G to the 5` end. To achieve this, the terminal 5` phosphate requires removal, which is done with the aid of a phosphatase enzyme.'
    m6a = 'N6-Methyladenosine is the most abundant internal modification in mRNA. It is catalysed by methyltransferase writer'
    m7g = '7-Methylguanosine is a methylated version of guanosine and plays a role in mRNA as a blocking group at its 5` end.'
    m5c = '5-Methylcytosine is a methylated form of cytosine that may be involved in the regulation of transcription. When cytosine is methylated, the DNA maintains the same sequence, but the expression of methylated genes can be altered.'
    nsun2 = 'NSUN2 is the primary human RNA methyltransferase. NSUN2-mediated methylation is crucial for the function of a variety of coding and non-coding RNA molecules, being involved in RNA stability, transport and efficient translation, as well as having a role in cell cycle'
    rossmanfold = 'The Rossmanfold is a structural motif found in proteins that bind nucleotides, such as enyzme cofactors FAD, NAD+ and NADP+.'
    utr = 'Untranslated region, does not code for protein. Found at 5` and 3` region ends of an mRNA'
    cordycepin = 'is a derivative of the nucleoside adenosine. Because Cordycepin is similar to adenosine, some enzymes cannot discriminate between teh two. It can therefore participate in biochemical reactions such as being incorporated into a mRNA molecule, resulting in premature termination of protein synthesis.'
    globallenthening = 'Global 3UTR lengthening of mRNA'
    globalshortening = 'Global 3UTR shortening of mRNA'
    polyatail = 'Poly-A tails are found on the 3 end of nearly every fully processed eurkaryotic mRNA and influences mRNA stabililty, translation and transport. '
    deseq = 'DESeq is a bioinfomratic program that quantifies and deconvolutes per event variance due to biological variation and changes in phenotype. This generates a list of events with statistically significant changes in alternative polyadenylation (PAT-seq) and gene isoform expression (RNA-Seq) respectively. A correlation analysis of PAT-Seq and RNA-Seq derived gene expression will provide insight into the effect of alternative splicing on alternative polyadenylation.'
    patseq = 'A method to study the integration of 3UTR dynamics with gene expression in teh eukaryote transcriptome. The poly-A T-test RNA sequencing returns 1.) digital gene expression, 2.) polyadenylation sites, 3.) the polyadenylation satte within and between eukaryote transcriptomes.'
    gsea = 'Gene set enrichment analysis uses compiled gene ontology consortium and MSigDB on statistically significant differential events that will identify dysregulated functional pathways that are important in the context of APA.'
    sequencingassembly = 'Refers to aligning and merging fragments froma longer DNA sequence in order to reconstruct the original sequence.'
    massspec = 'Mass spectrometry is an analytical technique that measures the mass to charge ratio of ions'
    lna = 'Locked nuclear acid or inaccessible RNA, is a modified RNA nucleotide with an extra bridge connecting an oxygen and a carbon. The locked ribose conformation enhances base stacking and back bone pre-organisation. This signifcantly increases hybridsation properties (melting temp) of oligonucleotides'
    rbdpm = 'RNA binding protein domain map is a webserver for mapping biding sites of RNA-binding proteins'
    pas = 'The PAS signal is located 15-30 nucleotides upstream of the cleavage site and has a canonical sequence of AAUAAA'
    use = 'Upstream sequence elements'
    dse = 'Downstream sequence elements'
    cpsf = 'Cleavage and polyadenylation specificity factor'
    cstf = 'Cleavage stimulating factor'
    cs = 'Cleavage factor'
    pap = 'poly(A) polymerase'
    pabpn1 = 'nuclear poly(A) binding protein 1'
    csrm = 'Cis-acting regulatory motifs are regions of non-coding DNA which regulate the transcription of neighbouring genes'
    tac = 'Trans-acting factors, means acting from a different molecule (intermolecular). It may be considered the opposite of cis-acting regulations which means acting from the same molecule.'
    rnaabundance = 'Numerical amounts of each particular sequence both as absolute and normalised values'
    silverstrol = 'Is an eIF4a inhibitor. The inhibitor induces apoptosis and tumour regression.'
    salubrinal = 'Is an eIF2-alpha inhibitor. It has found to induce malignant cell lethality.'
    CX5461 = 'Is a polymerase I inhibitor'
    everolimous = 'Is a mTORC1 inhibitor'
    polysome = 'Multiple ribosomes attached to an mRNA'
    polysomesedimentation = 'The process of which lysate runs through a sucrose gradient via centrifugation, and colelcting fractions from the top to the bottom. The bigger the fractions, teh faster they travel and therefore located at the bottom of the gradient.'
    eif = 'Eukaryote initiation factor are protein complexes involved in the initiation phase of translation. The proteins help stablise teh formation of ribosomal preinititation complexes around the start codon and are an important input for post-transcription regulation.'
    eif1 = 'eIF1 and eIF1A both bind to the 40S ribosome subunit-mRNA complex. Together they indeuce an open conformation of the mRNA binding channel, which is crucial for scanning tRNA delivery and start codon recognition. In particular, eIF1 dissociation from the 40S subunit is considered to be the key step in start codon recognition. eIF1 binds at near the ribosomal P-site whereas eIF1A binds near the A site.'
    eif2 = 'eIF2 is the main protein complex responsible for delivering the initiator tRNA tot he P-site of the pre-initiation complex, as a ternary complex containing Met-tRNA and GTP'
    eif3 = 'eIF3 independently binds to the 40S ribosomal unit and controls the assembly of 40S on mRNA that have a 5 cap or an IRES'
    eif4 = 'eIF4F complex consists of eIF4A, eIF4E and eIF4G. eIF4G is a scaffolding protein that interacts with eIF3 and poly-A binding protein. eIF4E recognises and binds to 5 cap structure of mRNA and eIF4G binds poly-A binding protein at the tail . eIF4A is important for resolving mRNA secondary structures.'
    eif5 = 'eIF5 is a GTPase activating protein which helps large ribosomal subunit associate with the small subunit. eIF5a helps with elongation and also plays a role with termination. eIF5b is involved with the assembly of the full ribosome. '
    eif6 = 'eIF6 performs the same inhibition of ribosome assembly as eIF3, but binds with the large subunit'
    oligodt = 'Oligo(dt) captures the poly-A-tail of an mRNA. Poly-A tails are found on the 3` end of nearly every fully processes eukaryote mRNA and influences mRNA stability, translation and transport.'
    ppin = 'Protein to protein interaction network is mapping expression to compiled protein-protein interaction data network from BioGRID, which allows a visual graph-based representation and identification of important regulatory pathways that are affected.'


    column1_mRNA = [
        [sg.Text('mRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('mRNA Slide Show', size=(30, 2), key='mrnass')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\mRNA\Slide3.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    column2_mRNA = [
        [sg.Text('mRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('mRNA Slide Show', size=(30, 2), key='mrnass')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_mRNA = [
        [(sg.Column(column1_mRNA, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2_mRNA, size=(400, 800), background_color='white', scrollable=True))
         ]]

    column1_tRNA = [
        [sg.Text('tRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('tRNA Slide Show', size=(30, 2), key='trnass')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\trna.png', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    column2_tRNA = [
        [sg.Text('tRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('tRNA Slide Show', size=(30, 2), key='trnass')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_tRNA = [
        [(sg.Column(column1_tRNA, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2_tRNA, size=(400, 800), background_color='white', scrollable=True))
         ]]

    column1_rRNA = [
        [sg.Text('rRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('rRNA Slide Show', size=(30, 2), key='rrnass')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\rRNA\Slide2.png', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    column2_rRNA = [
        [sg.Text('rRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('rRNA Processing Slide Show', size=(30, 2), key='rrnass')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_rRNA = [
        [(sg.Column(column1_rRNA, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2_rRNA, size=(400, 800), background_color='white', scrollable=True))
         ]]

    column1_miRNA = [
        [sg.Text('miRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('miRNA Slide Show', size=(30, 2), key='mirnass')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\miRNA\Slide3.png', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    column2_miRNA = [
        [sg.Text('miRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('miRNA Slide Show Part 1', size=(30, 2), key='mirnass')],
        [sg.Button('miRNA Slide Show Part 2', size=(30, 2), key='mir2')],
        [sg.Button('miRNA Regulation Slide Show', size=(30, 2), key='mirregss')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_miRNA = [
        [(sg.Column(column1_miRNA, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2_miRNA, size=(400, 800), background_color='white', scrollable=True))
         ]]

    column1_circRNA = [
        [sg.Text('circRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('circRNA Slide Show', size=(30, 2), key='circrnass')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\circRNA\Slide2.png', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    column2_circRNA = [
        [sg.Text('circRNA', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('circRNA Slide Show', size=(30, 2), key='circrnass')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_circRNA = [
        [(sg.Column(column1_circRNA, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2_circRNA, size=(400, 800), background_color='white', scrollable=True))
         ]]

    layout_Default = [[sg.T()]]


    layout_AtoD = [[sg.Text('Genomics Definitions A to D', font=('Helvetica', 12), background_color='white',
                            text_color='red')],
                   [sg.Button('Aminoacyl tRNA ', key='Aminoacyl tRNA')],
                   [sg.Button('Annotated ', key='Annotated')],
                   [sg.Button('Alignment', key='Alignment')],
                   [sg.Button('Anti-sense peak ', key='Anti-sense peak')],
                   [sg.Button('Allosteric ', key='Allosteric')],
                   [sg.Button('Adapters ', key='Adapters')],
                   [sg.Button('Adenylation', key='Adenylation')],
                   [sg.Button('Alternative polyadenylation', key='Alterntaive polyadenylation')],
                   [sg.Button('Bisulfite sequencing ', key='bisequencing')],
                   [sg.Button('Bisulfite treatment ', key='bitreatment')],
                   [sg.Button('CircRNA', key='CircRNA')],
                   [sg.Button('Consensus sequence', key='Consensus sequence')],
                   [sg.Button('Canonical sequence', key='Canonical sequence')],
                   [sg.Button('Coverage', key='Coverage')],
                   [sg.Button('Co-immunoprecipitation', key='Co-immunoprecipitation')],
                   [sg.Button('Contigs', key='Contigs')],
                   [sg.Button('Cordycepin', key='Cordycepin')],
                   [sg.Button('CPSF', key='CPSF')],
                   [sg.Button('CSTF', key='CSTF')],
                   [sg.Button('Cleavage factor', key='Cleavage factor')],
                   [sg.Button('CX5461', key='CX5461')],
                   [sg.Button('CSRM', key=' ')],
                   [sg.Button('Deactivated tRNA', key='Deactivated tRNA')],
                   [sg.Button('Directional sequencing', key='Directional sequencing')],
                   [sg.Button('Differential polyadenylation', key='Differential polyadenylation')],
                   [sg.Button('Distal peak', key='Distal peak')],
                   [sg.Button('Dynamics', key='Dynamics')],
                   [sg.Button('DESeq', key='DESeq')],
                   [sg.Button('Downstream sequencing element', key='Downstream sequencing element')],

                   ]

    layout_EtoL = [[sg.Text('Genomics Definitions E to L', font=('Helvetica', 12), text_color='red',
                            background_color='white')],
                   [sg.Button('Exonic features', key='Exonic features')],
                   [sg.Button('Exonuclease', key='Exonuclease')],
                   [sg.Button('Enriched ligated fragments', key='Enriched ligated fragments')],
                   [sg.Button('Expressed sequence tag', key='Expressed sequence tag')],
                   [sg.Button('eIF1', key='eIF')],
                   [sg.Button('eIF1', key='eIF1')],
                   [sg.Button('eIF2', key='eIF2')],
                   [sg.Button('eIF3', key='eIF3')],
                   [sg.Button('eIF4', key='eIF4')],
                   [sg.Button('eIF5', key='eIF5')],
                   [sg.Button('eIF6', key='eIF6')],
                   [sg.Button('Everolimous', key='Everolimous')],
                   [sg.Button('Flow cell', key='Flow cell')],
                   [sg.Button('Gene ontology', key='Gene ontology')],
                   [sg.Button('Gene annotation', key='Gene annotation')],
                   [sg.Button('Genome guided transcriptome assembly', key='Genome guided transcriptome assembly')],
                   [sg.Button('Garbage reads', key='Garbage reads')],
                   [sg.Button('Gene cluster', key='Gene cluster')],
                   [sg.Button('Gene length', key='Gene length')],
                   [sg.Button('Global lengthening', key='Global lengthening')],
                   [sg.Button('Global shortening', key='Global shortening')],
                   [sg.Button('Gene set enrichment analysis', key='Gene set enrichment analysis')],
                   [sg.Button('Hierachical clustering', key='Hierarchical clustering')],
                   [sg.Button('Intronic features', key='Intronic features')],
                   [sg.Button('iCLIP', key='iCLIP')],
                   [sg.Button('Intronic features', key='Intronic features')],

                   ]

    layout_MtoP = [[sg.Text('Genomics Definitions M to P', font=('Helvetica', 12), text_color='red',
                            background_color='white')],
                   [sg.Button('mRNA interactome', key='mRNA interactome')],
                   [sg.Button('mRNA footprint', key='mRNA footprint')],
                   [sg.Button('Methyltransferase', key='Methyltransferase')],
                   [sg.Button('mRNA capping', key='mRNA capping')],
                   [sg.Button('Mass spectrometry', key='Mass spectrometry')],
                   [sg.Button('m6A', key='m6A')],
                   [sg.Button('m7G', key='m7G')],
                   [sg.Button('m5C', key='m5C')],
                   [sg.Button('Normalisation', key='Normalisation')],
                   [sg.Button('Normalise', key='Normalise')],
                   [sg.Button('NSUN2', key='NSUN2')],
                   [sg.Button('Overlapping peak', key='Overlapping peak')],
                   [sg.Button('ORF', key='ORF')],
                   [sg.Button('Overhangs', key='Overhangs')],
                   [sg.Button('Oligo(dt)', key='Oligo(dt)')],
                   [sg.Button('Peptidyl tRNA', key='Peptidyl tRNA')],
                   [sg.Button('Peptidyl transferase', key='Peptidyl transferase')],
                   [sg.Button('Polymerisation', key='Polymerisation')],
                   [sg.Button('Polysome profile', key='Polysome profile')],
                   [sg.Button('Proximal peak', key='Proximal peak')],
                   [sg.Button('Physical coverage', key='Physical coverage')],
                   [sg.Button('PCA', key='PCA')],
                   [sg.Button('Polymerase', key='')],
                   [sg.Button('Posttranscriptional modification', key='Posttranscriptional modification')],
                   [sg.Button('Poly(A) tail', key='Poly(A) tail')],
                   [sg.Button('PAT-Seq', key='PATSeq')],
                   [sg.Button('PAS signal', key='PAS signal')],
                   [sg.Button('Poly(A) polymerase', key='Poly(A) polymerase')],
                   [sg.Button('PABPNL', key='PABPNL')],
                   [sg.Button('Polysome', key='Polysome')],
                   [sg.Button('Polysome sedimentation', key='Polysome sedimentation')],
                   [sg.Button('Protein to protein interaction network',
                              key='ppin')],
                   ]
    layout_QtoS = [[sg.Text('Genomics Definitions Q to S', font=('Helvetica', 12), text_color='red',
                            background_color='white')],
                   [sg.Button('Ribosome', key='Ribosome')],
                   [sg.Button('Ribosme 40S', key='Ribosome 40S')],
                   [sg.Button('Ribosome 60S', key='Ribosome 60S')],
                   [sg.Button('Ribosome 80S', key='Ribosome 80S')],
                   [sg.Button('RNA interactome', key='RNA interactome')],
                   [sg.Button('Ribosome profiling', key='Ribosome profiling')],
                   [sg.Button('RNA binding hits', key='RNA binding hits')],
                   [sg.Button('RNA abundance', key='RNA abundance')],
                   [sg.Button('Reads', key='Reads')],
                   [sg.Button('Read length', key='Read length')],
                   [sg.Button('Read counts', key='Read counts')],
                   [sg.Button('RBP writer', key='RBP writer')],
                   [sg.Button('RBP reader', key='RBP reader')],
                   [sg.Button('RBP eraser', key='RBP eraser')],
                   [sg.Button('Rossmanfold', key='Rossmanfold')],
                   [sg.Button('RNA binding protein domain map', key='rbdm')],
                   [sg.Button('SSU', key='SSU')],
                   [sg.Button('Subcellular localisation', key='Subcellular localisation')],
                   [sg.Button('Statistical significance', key='Statistical significance')],
                   [sg.Button('Sequencing assembly', key='Sequencing assembly')],
                   [sg.Button('Silvestriol', key='Silvestriol')],
                   [sg.Button('Salubrinal', key='Salubrinal')],

                   ]
    layout_TtoZ = [[sg.Text('Genomics Definitions T to Z', font=('Helvetica', 12), text_color='red',
                            background_color='white')],
                   [sg.Button('Transacting factor', key='Transacting factor')],
                   [sg.Button('UTR', key='UTR')],
                   [sg.Button('Upstream sequence elements', key='upe')],
                   ]

    definitions = [
        [(sg.Column(layout_AtoD, size=(250, 600), background_color='white', scrollable=True)),
         (sg.Column(layout_EtoL, size=(250, 600), background_color='white', scrollable=True)),
         (sg.Column(layout_MtoP, size=(250, 600), background_color='white', scrollable=True)),
         (sg.Column(layout_QtoS, size=(250, 600), background_color='white', scrollable=True)),
         (sg.Column(layout_TtoZ, size=(250, 600), background_color='white', scrollable=True))
         ]]

    # RNA subtypes
    layout_RNATypes = [
        [sg.TabGroup([[sg.Tab('mRNA', layout_mRNA),
                       sg.Tab('tRNA', layout_tRNA),
                       sg.Tab('rRNA', layout_rRNA),
                       sg.Tab('miRNA', layout_miRNA),
                       sg.Tab('circRNA', layout_circRNA),
                       sg.Tab('siRNA', layout_Default),
                       sg.Tab('piRNA', layout_Default),
                       sg.Tab('lnRNA', layout_Default)]],
                     tooltip='TIP2')],
        [sg.Button('Read')], [sg.Button('Exit')]]

    # subgroups
    layout_epitrans = [
        [sg.TabGroup([[sg.Tab('Overview', layout_Default),
                       sg.Tab('Methylation', layout_Default),
                       sg.Tab('Methyltransferases', layout_Default),
                       sg.Tab('RNA Methylation', layout_Default),
                       sg.Tab('NSUN2', layout_Default)
                       ]],
                     tooltip='TIP2')],
        [sg.Button('Read')], [sg.Button('Exit')]]


    layout_terminology = [
        [sg.TabGroup([[sg.Tab('Epitranscriptomics', definitions),

                       ]],
                     tooltip='TIP2')]]

    rnaprepcolumn1 = [
        [sg.Text('RNA Sequencing: Preparation', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('RNA Preparation Slide Show',size = (30,2),key= 'rnaprepss')],
        [sg.Text('', background_color='white')],
        [sg.Image(prep1)],
        [sg.Text('Slides by StatQ', background_color='white', size=(45, 4))]
    ]
    rnaprepcolumn2 = [
        [sg.Text('RNA Sequencing: Sequencing', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('RNA Sequencing Slide Show',size = (30,2), key='rnaseqss')],
        [sg.Text('', background_color='white')],
        [sg.Image(seq1)],
        [sg.Text('Slides by StatQ', background_color='white', size=(45, 4))]
    ]
    rnaprepcolumn3 = [
        [sg.Text('RNA Sequencing: Alignment', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('RNA Alignment Slide Show',size = (30,2), key='rnaalignss')],
        [sg.Text('', background_color='white')],
        [sg.Image(align1)],
        [sg.Text('Slides by StatQ', background_color='white', size=(45, 4))]
    ]
    rnaprepcolumn4 = [
        [sg.Text('RNA Sequencing: Analysis', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('RNA Analysis Slide Show',size = (30,2), key='rnaanalss')],
        [sg.Text('', background_color='white')],
        [sg.Image(anal1)],
        [sg.Text('Slides by StatQ', background_color='white', size=(45, 4))]
    ]

    rna_column_layout = [

        [(sg.Column(rnaprepcolumn1, size=(700, 800), background_color='white', scrollable=True)),
         (sg.Column(rnaprepcolumn2, size=(700, 800), background_color='white', scrollable=True))
         ]]

    rna_column_layout2 = [

        [(sg.Column(rnaprepcolumn3, size=(700, 800), background_color='white', scrollable=True)),
         (sg.Column(rnaprepcolumn4, size=(700, 800), background_color='white', scrollable=True))
         ]]

    layout_RNAsequencing = [
        [sg.TabGroup([[sg.Tab('RNA Sequencing: Preparation and Sequencing', rna_column_layout)],
                      [sg.Tab('RNA Sequencing: Analysis and Graph Plotting', rna_column_layout2)],
                       ],
                     tooltip='TIP2')]]

    column1polyadenylation = [
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\polyadenylation1.png')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\APA.png')]
    ]
    column2polyadenylation = [
        [sg.Multiline(
            'Polyadenylation and alternative polyadenylation events. (A) mRNAs with only one polyadenylation signal in the 3`UTR produce a single protein product. (B) mRNAs with more than one polyadenylation signal in the 3`UTR are likely to produce isoforms with different 3`UTR lengths. Protein product of these isoforms would be the same. (C) Alternative polyadenylation is coupled to alternative splicing, resulting with different mRNAs and different protein products. Alternative splicing in this case generates an isoform harbouring sequences from an internal exon. (D) Alternative splicing generates an isoform from an intron, causing proximal polyadenylation, giving rise to a different protein product. Green boxes show exons, green line show introns, light blue boxes show 31 untranslated regions.',
            size=(38, 30))]
    ]
    column3polyadenylation = [
        [sg.Button('Alternative Adenylation Slide Show', size=(25, 2), key='polyss')],
        [sg.Text('', background_color='white')],
        [sg.Text('Polyadenylation related definitions:', background_color='white', text_color='red')],
        [sg.Button('Alternative polyadenylation', key='Alternative polyadenylation')],
        [sg.Button('Anti-sense peak', key='Anti-sense peak')],
        [sg.Button('CPSF', key='CPSF')],
        [sg.Button('CSTF', key='CSTF')],
        [sg.Button('CSRM', key='CSRM')],
        [sg.Button('Distal peak', key='Distal peak')],
        [sg.Button('Downstream sequencing elements', key='dse')],
        [sg.Button('Upstream sequencing elements', key='use')],
        [sg.Button('Gene set enrichment analysis', key='gsea')],
        [sg.Button('Overhangs', key='Overhangs')],
        [sg.Button('PAS', key='PAS signal')],
        [sg.Button('Proximal peak', key='Proximal peak')],
        [sg.Button('Poly(A) tail', key='Poly(A) tail')]
    ]

    layout_Polyadenylation = [

        [(sg.Column(column1polyadenylation, size=(850, 800), background_color='white', scrollable=True)),
         (sg.Column(column2polyadenylation, size=(300, 800), background_color='white', scrollable=True)),
         (sg.Column(column3polyadenylation, size=(300, 800), background_color='white', scrollable=True))
         ]]

    column1bisulfite = [
        [sg.Button('Bisulfite sequencing slideshow', size=(30, 2), key='bisulfitess')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\Bisulfite sequencing\Slide1.png')]

    ]
    column2bisulfite = [
        [sg.Button('Bisulfite sequencing slideshow', size=(30, 2), key='bisulfitess')]
    ]

    layout_bisulfite = [

        [(sg.Column(column1bisulfite, size=(850, 800), background_color='white', scrollable=True)),
         (sg.Column(column2bisulfite, size=(400, 800), background_color='white', scrollable=True))
         ]]

    column1CRISPR = [
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\CRISPR Powerpoint\Slide1.png')],
        [sg.Button('CRISPR-Cas overview', key='crisprss',size=(40,2))],

    ]
    column2CRISPR = [
        [sg.Text('Slide Shows',background_color='white', size=(40, 2))],
        [sg.Button('CRISPR-Cas Overview', key='crisprss', size=(40, 2))],

    ]

    layout_CRISPR = [

        [(sg.Column(column1CRISPR, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(column2CRISPR, size=(400, 800), background_color='white', scrollable=True))
         ]]

    transcriptioncolumn1 = [
        [sg.Text('Transcription', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Transcription Slide Show', size=(30, 2), key='transcriptionss'),sg.Button('Transcription Slide Show 2 Part 1', size=(30, 2), key='ss2part1'),sg.Button('Transcription Slide Show 2 Part 1', size=(30, 2), key='ss2part2'),
         sg.Button('Transcriptome Slide Show Part 1', size=(30, 2), key='transcriptome1'),sg.Button('Transcriptome Slide Show Part 2', size=(30, 2), key='transcriptome2')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\Transcription\Slide1.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    transcriptioncolumn2 = [
        [sg.Text('Transcription', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Transcription Slide Show', size=(30, 2), key='transcriptionss')],
        [sg.Button('Transcription Slide Show 2 Part 1', size=(30, 2), key='ss2part1')],
        [sg.Button('Transcription Slide Show 2 Part 2', size=(30, 2), key='ss2part2')],
        [sg.Button('Transcriptome Slide Show Part 1', size=(30, 2), key='transcriptome1')],
        [sg.Button('Transcriptome Slide Show Part 2', size=(30, 2), key='transcriptome2')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_Transcription = [

        [(sg.Column(transcriptioncolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(transcriptioncolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    translationcolumn1 = [
        [sg.Text('Translation', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Translation Slide Show', size=(30, 2), key='translationss')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\Translation\Slide2.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    translationcolumn2 = [
        [sg.Text('Translation', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Translation Slide Show', size=(30, 2), key='translationss')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_Translation = [

        [(sg.Column(translationcolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(translationcolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    ribosomecolumn1 = [
        [sg.Text('Ribosomes', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Ribosome Slide Show 1', size=(30, 2), key='ribosomess1'),sg.Button('Ribosome Slide Show 2', size=(30, 2), key='ribosomess2')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\RNA\Ribosome2\Slide2.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    ribosomecolumn2 = [
        [sg.Text('Ribosome', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Ribosome Slide Show', size=(30, 2), key='ribosomess1')],
        [sg.Button('Ribosome Slide Show 2', size=(30, 2), key='ribosomess2')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_Ribosomes = [

        [(sg.Column(ribosomecolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(ribosomecolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    layout_Genomics = [[sg.Button('Menu',key='menu')],

                       [sg.TabGroup([[sg.Tab('Genomic Terminology', layout_terminology),
                                      sg.Tab('RNA Types', layout_RNATypes),
                                      sg.Tab('Transcription', layout_Transcription),
                                      sg.Tab('Translation', layout_Translation),
                                      sg.Tab('Ribosomes', layout_Ribosomes),
                                      sg.Tab('RNA Sequencing', layout_RNAsequencing),
                                      sg.Tab('Gene Editing', layout_CRISPR),
                                      sg.Tab('PAT Sequencing', layout_Default),
                                      sg.Tab('Polyadenylation and APA', layout_Polyadenylation),
                                      sg.Tab('Epitranscriptomics', layout_Default),
                                      sg.Tab('Bi-Sulfite treatment', layout_bisulfite),
                                      sg.Tab('Polysome Profiling', layout_Default),
                                      sg.Tab('RNA/Protein interactome', layout_Default),
                                      ]],
                                    tooltip='TIP2')],
                       [sg.Button('Read')], [sg.Button('Back')],[sg.Button('Exit')]]

    genomics_window = sg.Window('Genomics', layout_Genomics, size=(1700, 750), grab_anywhere=False)
    title_window.Hide()

    while True:
        event3, value3 = genomics_window.Read()
        if event3 is None or event3 == 'Exit':
            genomics_window.Close()
        elif event3.startswith('menu'):
            menu()

        elif event3.startswith('splicing'):
            for i in range(10000000):
                popup_animated(splicing, time_between_frames=5000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('Bisulfite'):
            for i in range(10000000):
                popup_animated(bisulfite, time_between_frames=10000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('CRISPR1'):
            for i in range(10000000):
                popup_animated(CRISPR1, time_between_frames=10000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('CRISPR2'):
            for i in range(10000000):
                popup_animated(CRISPR2, time_between_frames=10000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('CRISPR3'):
            for i in range(10000000):
                popup_animated(CRISPR3, time_between_frames=10000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('CRISPR4'):
            for i in range(10000000):
                popup_animated(CRISPR4, time_between_frames=10000, alpha_channel=1,no_titlebar=False,keep_on_top=True,grab_anywhere=True, background_color='black')
            sg.popup_animated(None)
        elif event3.startswith('rnaprepss'):
            rnaprepss()
        elif event3.startswith('rnaseqss'):
            rnaseqss()
        elif event3.startswith('rnaalignss'):
            rnaalignss()
        elif event3.startswith('rnaanalss'):
            rnaanalss()
        elif event3.startswith('crisprss'):
            crisprss()
        elif event3.startswith('transcriptionss'):
            transcriptionss()
        elif event3.startswith('transcriptome1'):
            transcriptome1()
        elif event3.startswith('transcriptome2'):
            transcriptome2()
        elif event3.startswith('ss2part1'):
            ss2part1()
        elif event3.startswith('ss2part2'):
            ss2part2()
        elif event3.startswith('translationss'):
            translationss()
        elif event3.startswith('mrnass'):
            mrnass()
        elif event3.startswith('trnass'):
            trnass()
        elif event3.startswith('rrnass'):
            rrnass()
        elif event3.startswith('ribosomess1'):
            ribosomess1()
        elif event3.startswith('ribosomess2'):
            ribosomess2()
        elif event3.startswith('bisulfitess'):
            bisulfitess()
        elif event3.startswith('polyss'):
            polyss()
        elif event3.startswith('mirnass'):
            mirnass()
        elif event3.startswith('mir2'):
            mir2()
        elif event3.startswith('mirregss'):
            mirregss()
        elif event3.startswith('circrnass'):
            circrnass()

        elif event3.startswith('Aminoacyl tRNA'):
            popup_scrolled(aminoacyltrna)
        elif event3.startswith('Annotated'):
            popup_scrolled(annotated)
        elif event3.startswith('Alignment'):
            popup_scrolled(alignment)
        elif event3.startswith('Anti-sense peak'):
            popup_scrolled(antisensepeak)
        elif event3.startswith('Allosteric'):
            popup_scrolled(Allosteric)
        elif event3.startswith('Adapters'):
            popup_scrolled(adapters)
        elif event3.startswith('Adenylation'):
            popup_scrolled(adeynlation)
        elif event3.startswith('Alternative polyadenylation'):
            popup_scrolled(apa)
        elif event3.startswith('bisequencing'):
            popup_scrolled(bisulfitesequencing)
        elif event3.startswith('bitreatment'):
            popup_scrolled(bisulfitetreatment)
        elif event3.startswith('CircRNA'):
            popup_scrolled(circrna)
        elif event3.startswith('Cleavage factor'):
            popup_scrolled(cs)
        elif event3.startswith('Consensus sequence'):
            popup_scrolled(consensussequence)
        elif event3.startswith('Canonical sequence'):
            popup_scrolled(canonicalsequence)
        elif event3.startswith('Coverage'):
            popup_scrolled(coverage)
        elif event3.startswith('Co-immunoprecipitation'):
            popup_scrolled(coimmuno)
        elif event3.startswith('Contigs'):
            popup_scrolled(contigs)
        elif event3.startswith('Cordycepin'):
            popup_scrolled(cordycepin)
        elif event3.startswith('CPSF'):
            popup_scrolled(cpsf)
        elif event3.startswith('CSTF'):
            popup_scrolled(cstf)
        elif event3.startswith('CSRM'):
            popup_scrolled(csrm)
        elif event3.startswith('CX5461'):
            popup_scrolled(CX5461)
        elif event3.startswith('Deactivated tRNA'):
            popup_scrolled(deactivatedtrna)
        elif event3.startswith('Directional sequencing'):
            popup_scrolled(directionalsequencing)
        elif event3.startswith('Differential polyadenylation'):
            popup_scrolled(differentialpolyadenylation)
        elif event3.startswith('Distal peak'):
            popup_scrolled(distalpeak)
        elif event3.startswith('Dynamics'):
            popup_scrolled(dynamics)
        elif event3.startswith('DESeq'):
            popup_scrolled(deseq)
        elif event3.startswith('Downstream sequence elements'):
            popup_scrolled(dse)
        elif event3.startswith('Exonic features'):
            popup_scrolled(exonicfeatures)
        elif event3.startswith('Exonuclease'):
            popup_scrolled(exonuclease)
        elif event3.startswith('Everolimous'):
            popup_scrolled(everolimous)
        elif event3.startswith('Enriched ligated fragments'):
            popup_scrolled(elf)
        elif event3.startswith('Expressed sequence tag'):
            popup_scrolled(est)
        elif event3.startswith('eIF'):
            popup_scrolled(eif)
        elif event3.startswith('eIF1'):
            popup_scrolled(eif1)
        elif event3.startswith('eIF2'):
            popup_scrolled(eif2)
        elif event3.startswith('eIF3'):
            popup_scrolled(eif3)
        elif event3.startswith('eIF4'):
            popup_scrolled(eif4)
        elif event3.startswith('eIF5'):
            popup_scrolled(eif5)
        elif event3.startswith('eIF6'):
            popup_scrolled(eif6)
        elif event3.startswith('Flow cell'):
            popup_scrolled(flowcell)
        elif event3.startswith('Gene ontology'):
            popup_scrolled(geneontology)
        elif event3.startswith('Gene annotation'):
            popup_scrolled(geneannotation)
        elif event3.startswith('Genome guided transcriptome assembly'):
            popup_scrolled(ggta)
        elif event3.startswith('Garbage reads'):
            popup_scrolled(garbagereads)
        elif event3.startswith('Gene cluster'):
            popup_scrolled(genecluster)
        elif event3.startswith('Gene length'):
            popup_scrolled(genelength)
        elif event3.startswith('Global lengthening'):
            popup_scrolled(globallenthening)
        elif event3.startswith('Global shortening'):
            popup_scrolled(globalshortening)
        elif event3.startswith('Gene set enrichment analysis'):
            popup_scrolled(gsea)
        elif event3.startswith('Hierarchical clustering'):
            popup_scrolled(hierarchicalclustering)
        elif event3.startswith('Intronic features'):
            popup_scrolled(intronicfeatures)
        elif event3.startswith('iCLIP'):
            popup_scrolled(iclip)
        elif event3.startswith('LSU'):
            popup_scrolled(lsu)
        elif event3.startswith('Ligation adapters'):
            popup_scrolled(ligationadapters)
        elif event3.startswith('Locked nuclear acid'):
            popup_scrolled(lna)
        elif event3.startswith('mRNA interactome'):
            popup_scrolled(mic)
        elif event3.startswith('mRNA interactome capture'):
            popup_scrolled(mic)
        elif event3.startswith('mRNA footprint'):
            popup_scrolled(mrnafootprint)
        elif event3.startswith('Methyltransferase'):
            popup_scrolled(methyltransferase)
        elif event3.startswith('mRNA capping'):
            popup_scrolled(mrnacapping)
        elif event3.startswith('Mass spectrometry'):
            popup_scrolled(massspec)
        elif event3.startswith('m6A'):
            popup_scrolled(m6a)
        elif event3.startswith('m7A'):
            popup_scrolled(m7g)
        elif event3.startswith('m5C'):
            popup_scrolled(m5c)
        elif event3.startswith('Normalisation'):
            popup_scrolled(normalize)
        elif event3.startswith('Normalise'):
            popup_scrolled(normalize)
        elif event3.startswith('NSUN2'):
            popup_scrolled(nsun2)
        elif event3.startswith('Overlapping peak'):
            popup_scrolled(overlappingpeak)
        elif event3.startswith('ORF'):
            popup_scrolled(orf)
        elif event3.startswith('Overhangs'):
            popup_scrolled(overhangs)
        elif event3.startswith('Oligo(dt)'):
            popup_scrolled(oligodt)
        elif event3.startswith('Peptidyl tRNA'):
            popup_scrolled(peptidyltrna)
        elif event3.startswith('Peptidyl transferase'):
            popup_scrolled(peptidyltransferase)
        elif event3.startswith('Polymerisation'):
            popup_scrolled(polymerisation)
        elif event3.startswith('Polysome profiling'):
            popup_scrolled(polysomeprofiling)
        elif event3.startswith('Proximal peak'):
            popup_scrolled(proximalpeak)
        elif event3.startswith('Physical coverage'):
            popup_scrolled(physicalcoverage)
        elif event3.startswith('PCA'):
            popup_scrolled(pca)
        elif event3.startswith('Polymerase'):
            popup_scrolled(polymerase)
        elif event3.startswith('Posttranscriptional modification'):
            popup_scrolled(postranscriptionalmodification)
        elif event3.startswith('Poly(A) tail'):
            popup_scrolled(polyatail)
        elif event3.startswith('PATSeq'):
            popup_scrolled(patseq)
        elif event3.startswith('PAS signal'):
            popup_scrolled(pas)
        elif event3.startswith('Poly(A) polymerase'):
            popup_scrolled(pap)
        elif event3.startswith('PABPNL'):
            popup_scrolled(pabpn1)
        elif event3.startswith('Polysome'):
            popup_scrolled(polysome)
        elif event3.startswith('Polysome sedimentaion'):
            popup_scrolled(polysomesedimentation)
        elif event3.startswith('Protein to protein interaction network'):
            popup_scrolled(ppin)
        elif event3.startswith('Ribosome'):
            popup_scrolled(ribosome)
        elif event3.startswith('Ribosome 40S'):
            popup_scrolled(ribosome40s)
        elif event3.startswith('Ribosome 60S'):
            popup_scrolled(ribosome60s)
        elif event3.startswith('Ribosome 80S'):
            popup_scrolled(ribosome80S)
        elif event3.startswith('RNA interactome capture'):
            popup_scrolled(ric)
        elif event3.startswith('Ribosome profiling'):
            popup_scrolled(ribosomeprofiling)
        elif event3.startswith('RNA binding hits'):
            popup_scrolled(rbh)
        elif event3.startswith('RNA abundance'):
            popup_scrolled(rnaabundance)
        elif event3.startswith('Reads'):
            popup_scrolled(reads)
        elif event3.startswith('Read length'):
            popup_scrolled(readlength)
        elif event3.startswith('Read counts'):
            popup_scrolled(readcounts)
        elif event3.startswith('RBP writer'):
            popup_scrolled(rbpwriter)
        elif event3.startswith('RBP reader'):
            popup_scrolled(rbpreader)
        elif event3.startswith('RBP eraser'):
            popup_scrolled(rbperaser)
        elif event3.startswith('Rossmanfold'):
            popup_scrolled(rossmanfold)
        elif event3.startswith('SSU'):
            popup_scrolled(ssu)
        elif event3.startswith('Subcellular localisation'):
            popup_scrolled(suncellularlocalisation)
        elif event3.startswith('Statistical significance'):
            popup_scrolled(statsig)
        elif event3.startswith('Sequencing assembly'):
            popup_scrolled(sequencingassembly)
        elif event3.startswith('Silvestriol'):
            popup_scrolled(silverstrol)
        elif event3.startswith('Salubrinal'):
            popup_scrolled(salubrinal)
        elif event3.startswith('UTR'):
            popup_scrolled(utr)
        elif event3.startswith('use'):
            popup_scrolled(use)
    exit()

##########################################################################################################################################################################
##########################################################################################################################################################################

#                           DEF CLIMATE

#######################################################################################################################################################################
#######################################################################################################################################################################


def climate():
    title_window.Hide()
    climate_window_active = True
    layout_Temp = [[sg.T()]]
    layout_Current = [[sg.T()]]
    layout_Ice = [[sg.T()]]
    layout_CO2 = [[sg.T()]]
    layout_Ozone = [[sg.T()]]
    layout_OWater = [[sg.T()]]
    layout_FWater = [[sg.T()]]
    layout_Weather = [[sg.T()]]
    layout_Pop = [[sg.T()]]
    layout_Footprint = [[sg.T()]]

    climoverviewcolumn1 = [
        [sg.Text('Climate Change', background_color='white', text_color='red')],
        [sg.Text('',background_color='white')],

        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\climatechange.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    climoverviewcolumn2 = [

        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_climoverview = [

        [(sg.Column(climoverviewcolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(climoverviewcolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    co2column1 = [
        [sg.Text('CO2 Levels', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],

        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\co2.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    co2column2 = [

        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_co2 = [

        [(sg.Column(co2column1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(co2column2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    glocurrcolumn1 = [
        [sg.Text('Global Current', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],

        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\globalcurrent.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    glocurrcolumn2 = [

        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_glocurr = [

        [(sg.Column(glocurrcolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(glocurrcolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    glotempcolumn1 = [
        [sg.Text('Global Current', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],

        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\glotemp.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    glotempcolumn2 = [

        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_glotemp = [

        [(sg.Column(glotempcolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(glotempcolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    gloicecolumn1 = [
        [sg.Text('Global Current', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],

        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\icemelt.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Climate\icemelt2.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    gloicecolumn2 = [

        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_gloice = [

        [(sg.Column(gloicecolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(gloicecolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    layout_climatetab = [
        [sg.TabGroup([[sg.Tab('Climate change overview', layout_climoverview),
                    sg.Tab('Global Temperature', layout_glotemp),
                       sg.Tab('Global Current', layout_glocurr),
                       sg.Tab('Global Ice Melt', layout_gloice),
                       sg.Tab('Carbon Dioxide Levels', layout_co2),
                       sg.Tab('Human Population', layout_Pop)]],
                        sg.Tab('Carbon Footprint', layout_Footprint),
                     tooltip='TIP2')],
        [sg.Button('Read')], [sg.Button('Exit')]]

    climate_window = sg.Window('Climate', layout_climatetab)

    while True:
        event8, value8 = climate_window.Read()
        if event8 is None or event8 == 'Exit':
            climate_window_active_window_active = False
            climate_window.Close()
            title_window.UnHide()
            break

#####################################################################################################################################################################
#####################################################################################################################################################################

#               DEF CANCER IMMUNOLOGY

#####################################################################################################################################################################
#####################################################################################################################################################################


def cancerImmunology():
    title_window.Hide()

    def engene():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide12.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide13.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,c14,c15]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('RNA Preparation', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)



    deliverycolumn1 = [
        [sg.Text('EngeneIC delivery vechicles', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('EDV Slide show', size=(30, 2), key='engeneic')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Cancer Immunology\Engene\Slide1.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    deliverycolumn2 = [
        [sg.Text('EngeneIC delivery vechicles', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('EDV Slide Show', size=(30, 2), key='engeneic')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_delivery = [

        [(sg.Column(deliverycolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(deliverycolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]

    layout_cells = [[sg.T()]]
    layout_vaccines = [[sg.T()]]


    layout_cancerImmunologytab = [
        [sg.TabGroup([[sg.Tab('Delivery Vechicles', layout_delivery),
                       sg.Tab('Cancer killing cells', layout_cells),
                       sg.Tab('Cancer Vaccines', layout_vaccines)]],
                     tooltip='TIP2')],
        [sg.Button('Read')], [sg.Button('Exit')]]

    cancerImmunology_window = sg.Window('Climate', layout_cancerImmunologytab)

    while True:
        event8, value8 = cancerImmunology_window.Read()
        if event8 is None or event8 == 'Exit':
            climate_window_active_window_active = False
            cancerImmunology_window.Close()
            title_window.UnHide()
            break
        elif event8.startswith('engeneic'):
            engene()

#########################################################################################################################################################################
########################################################################################################################################################################

#        DEF RENAL

#######################################################################################################################################################################
#######################################################################################################################################################################

def renal():
    title_window.Hide()

    slide0 = b''

    def dpp():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide16.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,c14,c15,c16]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Renal', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def lina():
        c1 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide10.png')
        c11 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\Renal\Lina\Slide26.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,c14,c15,c16,
                 c17,c18,c19,c20,c21,c22,c23,c24,c25,c26]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Renal', layout,
                           size=(1000, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)



    renalcolumn1 = [
        [sg.Text('Renal Nephropathy Inbibitors', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('DPP4 inhibitors slide show', size=(30, 2), key='dpp4')],
        [sg.Text('', background_color='white')],
        #[sg.Image(r'C:\Users\User\PycharmProjects\GUI\Renal\DDP4\Slide1')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    renalcolumn2 = [
        [sg.Text('EngeneIC delivery vechicles', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('DPP4 inhibitors slide show', size=(30, 2), key='dpp')],
        [sg.Button('Linagliptin inhibitor slide show', size=(30, 2), key='lina')],
        [sg.Button('Linagliptin inhibitor 2 slide show', size=(30, 2), key='dpp43')],
        [sg.Text('', background_color='white')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_renal = [

        [(sg.Column(renalcolumn1, size=(1050, 800), background_color='white', scrollable=True)),
         (sg.Column(renalcolumn2, size=(400, 800), background_color='white', scrollable=True))
         ]]


    renal_window = sg.Window('Renal Nephropathy', layout_renal)

    while True:
        event8, value8 = renal_window.Read()
        if event8 is None or event8 == 'Exit':
            renal_window_active_window_active = False
            renal_window.Close()
            title_window.UnHide()
            break
        elif event8.startswith('dpp4'):
            dpp()
        elif event8.startswith('lina'):
            lina()

####################################################################################################################################################################
###################################################################################################################################################################3

#        DEF ELECTRONICS

###################################################################################################################################################################
###################################################################################################################################################################


def electronics():
    title_window.Hide()

    slide0 = b''

    layout_default = [[sg.T()]]

    layout_electronicstab = [
        [sg.TabGroup([[sg.Tab('Overview', layout_default),
                       sg.Tab('Voltage, Current and Resistance', layout_default),
                       sg.Tab('Resistor', layout_default),
                       sg.Tab('Capacitor', layout_default),
                       sg.Tab('Transistor', layout_default),
                       sg.Tab('Diode', layout_default),
                       sg.Tab('Inductor', layout_default),
                       sg.Tab('Microcontroller', layout_default),
                       sg.Tab('Batteries', layout_default),
                       sg.Tab('Relay', layout_default),
                       sg.Tab('Integrated circuit', layout_default),
                       sg.Tab('Infrared sesnors', layout_default),
                       sg.Tab('Ultrasonic sensors', layout_default),
                       sg.Tab('Light Senors', layout_default),
                       sg.Tab('Solar Panels', layout_default)]])]]




    title_window.Hide()
    electronics_window_active = True

    electronics_window = sg.Window('Electronics', layout = layout_electronicstab)
    while True:
        event9, value9 = electronics_window.Read()
        if event9 is None or event9 == 'Exit':
            electronics_window_active = False
            electronics_window.Close()
            title_window.UnHide()
            break

##################################################################################################################################################
#################################################################################################################################################

#       DEF SURVIVAL

################################################################################################################################################
###################################################################################################################################################

def survival():
    title_window.Hide()

    slide0 = b''


    def crops():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Crop rotation1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Crop rotation2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Crop rotation3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Crop rotation4.png')

        shows = [slide0, c1, c2, c3, c4]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Crop Rotation', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def waterdist():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterdistillation1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterdistillation2.png')

        shows = [slide0, c1, c2,]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Water distillation', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)


    def kiln():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Kilnssmeltersforges1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Kilnssmeltersforges2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Kilnssmeltersforges3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Kilnssmeltersforges4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Kilnssmeltersforges5.png')
        shows = [slide0, c1, c2, c3, c4,c5]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Kilns and Smelters', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)


    def chemistry():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\CaCO.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Cement1.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Cement2.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\KCO.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\KN.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\NaCO1.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\NaCO2.png')

        shows = [slide0, c1, c2, c3, c4,c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Chemistry Survival', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)



    def foods():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food10.png')
        c11= (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food17.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food18.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food19.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food20.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food21.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food22.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food23.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food24.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food25.png')
        c26 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food26.png')
        c27 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food27.png')
        c28 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Edible Food28.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,
                 c21,c22,c23,c24,c25,c26,c27,c28]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Foods and Materials', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def bread():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Makingbread1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Makingbread2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Makingbread3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Makingbread4.png')

        shows = [slide0, c1, c2, c3, c4]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Making Bread', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)


    def soap():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\soap1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\soap2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\soap3.png')


        shows = [slide0, c1, c2, c3]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Making Soap', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def salt():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\salt1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\salt2.png')

        shows = [slide0, c1, c2]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Extracting Salt', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def skinning():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\skinfish.png')


        shows = [slide0, c1]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Skinning animals', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def radio():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\radio1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\radio2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\radio3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\radio4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\radio5.png')

        shows = [slide0, c1, c2, c3, c4, c5]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Radio', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def waterwindmill():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterwindmill1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterwindmill2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterwindmill3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterwindmill4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\Waterwindmill5.png')
        shows = [slide0, c1, c2, c3, c4, c5]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Water mills and wind mills', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def compass():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\compass1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\compass2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong1.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong2.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong3.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong4.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong5.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong6.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\latlong7.png')
        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Compass', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def boats():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\boats7.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Boats', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def steel():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\steel1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\steel2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\steel3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\steel4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\welding1.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Survival in depth\welding2.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Steel and Welding', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def blake():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot10.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Blakes Hitch Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def bowline():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot7.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Bow Line Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def clovehitch():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch6.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Clove Hitch Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def double():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot7.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot8.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot9.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot10.png')
        c11= (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot11.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot12.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot13.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot14.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot15.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot16.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot17.png')

        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10,c11,c12,c13,c14,c15,c16,c17]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Double Dishemans knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def noose():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot6.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Noose Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the windowdouble2
            window['-IMAGE-'].update(show)

    def double2():
        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper7.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Double overhand stopper knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def double2():
        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper7.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Double overhand stopper knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def sheet():
        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend4.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend5.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend6.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend7.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Sheet Bend Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def fig():
        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\fig8knot1.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\fig8knot2.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\fig8knot3.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\knots\fig8knot4.png')

        shows = [slide0, c1, c2, c3, c4]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Figure 8 Knot', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    def plants():

        c1 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\0.png')
        c2 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\1.png')
        c3 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\2.png')
        c4 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\3.png')
        c5 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\4.png')
        c6 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\5.png')
        c7 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\6.png')
        c8 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\7.png')
        c9 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\8.png')
        c10 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\9.png')
        c11= (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\10.png')
        c12 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\11.png')
        c13 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\12.png')
        c14 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\13.png')
        c15 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\14.png')
        c16 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\15.png')
        c17 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\16.png')
        c18 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\17.png')
        c19 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\18.png')
        c20 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\19.png')
        c21 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\20.png')
        c22 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\21.png')
        c23 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\22.png')
        c24 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\23.png')
        c25 = (r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants\24.png')


        shows = [slide0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,
                 c21,c22,c23,c24,c25]

        layout = [

            [sg.Image(data=shows[0], enable_events=True, background_color='white', key='-IMAGE-',
                      right_click_menu=['UNUSED', 'Exit'])],
            [sg.Button('Back', size=(20, 3), key='Back'), sg.Button('Forward', size=(20, 3), key='Forward'),
             sg.Button('Exit', size=(20, 3), key='Exit1')]
        ]

        window = sg.Window('Edible Australian Plants', layout,
                           size=(800, 800),
                           no_titlebar=False,
                           grab_anywhere=True,
                           keep_on_top=True,
                           background_color='white',
                           alpha_channel=1,
                           margins=(1, 1))

        offset = 0
        show = shows[0]
        while True:  # Event Loop
            event, values = window.read()
            if event in (None, 'Exit', 'Cancel'):
                break
            elif event.startswith('Exit1'):
                window.close()
            elif event.startswith('Forward'):  # if clicked on the image
                offset += (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            elif event.startswith('Back'):
                offset -= (offset < len(shows) - 1)  # add 1 until the last one
                show = shows[offset]  # get a new image
            # update the image in the window
            window['-IMAGE-'].update(show)

    layout_default = [[sg.T()]]



    water = [
        [sg.Text('Water ', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Water.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_water = [
        [(sg.Column(water, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    fire = [
        [sg.Text('Fire ', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Fire.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_fire = [
        [(sg.Column(fire, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    food = [
        [sg.Text('Australia Food ', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Food.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Foodprep.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_food = [
        [(sg.Column(food, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    sleep = [
        [sg.Text('Sleep ', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Sleep.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_sleep = [
        [(sg.Column(sleep, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    injury = [
        [sg.Text('Injuries', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Broken.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_injury = [
        [(sg.Column(injury, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    animals = [
        [sg.Text('Animal attacks', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Animalattacks.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_animals = [
        [(sg.Column(animals, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    weather = [
        [sg.Text('Weather conditions', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Storm.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Sandstorm.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_weather = [
        [(sg.Column(weather, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    wilder = [
        [sg.Text('Camping/Wilderness/Living of the land', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Wildernessskills.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Makinghome.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Livingofland.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_wilder = [
        [(sg.Column(wilder, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    inwater = [
        [sg.Text('Water stranded', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Inwater.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Inwater2.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Inwater3.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Inwater4.PNG')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Inwater5.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_inwater = [
        [(sg.Column(inwater, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    search = [
        [sg.Text('Search and rescue', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\search.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_search = [
        [(sg.Column(search, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    movingon = [
        [sg.Text('Moving on', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Move.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_movingon = [
        [(sg.Column(movingon, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    shore = [
        [sg.Text('Shoreside survival', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Shoresurvival.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_shore = [
        [(sg.Column(shore, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    ocean = [
        [sg.Text('Surviving the ocean', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\pacificocean.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_ocean = [
        [(sg.Column(ocean, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    outback = [
        [sg.Text('Surviving the outback', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Outback.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_outback = [
        [(sg.Column(outback, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    hot = [
        [sg.Text('Surviving the heat', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Hot.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_hot = [
        [(sg.Column(hot, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    cold = [
        [sg.Text('Surving the cold', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Survival\Cold.PNG')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_cold = [
        [(sg.Column(cold, size=(1000, 800), background_color='white', scrollable=True))
         ]]

    other = [
        [sg.Text('Other Skills', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Crop Rotation',image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\crops.png'), image_size=(200,200), key = 'crops'),
        sg.Button('Foods and Materials', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\foods.png'),image_size=(200, 200), key='foods'),
        sg.Button('Kilns and Smelters', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\kilns.png'),image_size=(200, 200), key='kilns'),
        sg.Button('Extracting Salt', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\salt.png'),image_size=(200, 200), key='salt'),
         sg.Button('Skinning animals', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\fish.png'),image_size=(200, 200), key='skinning'),
        sg.Button('Water distillation', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\waterdist.png'),image_size=(200, 200), key='waterdist')],
        [sg.Button('Watermill and Windmill', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\watermill.png'),image_size=(200, 200), key='waterwindmill'),
         sg.Button('Chemistry for Survival',image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\chemistry.png'), image_size=(200, 200),key='chemistry'),
         sg.Button('Radio',image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\radio.png'), image_size=(200, 200),key='radio'),
         sg.Button('Boats', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\boats.png'),image_size=(200, 200), key='boats'),
         sg.Button('Compass', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\compass.png'),image_size=(200, 200), key='compass'),
         sg.Button('Making Bread', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\bread.png'),image_size=(200, 200), key='bread')],
        [sg.Button('Making Soap', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\soap.png'),image_size=(200, 200), key='soap'),
         sg.Button('Edible Aussie Plants', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\Trees and Plants/main.png'),image_size=(200, 200), key='plants'),
         sg.Button('Steel and Welding', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\steel.png'),image_size=(200, 200), key='steel')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_knots = [
        [sg.Text('Knots', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Button('Blake Hitch Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\blakeshitchknot10.png'),
                   image_size=(300, 300), key='blake'),
         sg.Button('Bowline Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\bowlineknot7.png'),
                   image_size=(300, 300), key='bowline'),
         sg.Button('Clove Hitch Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\clovehitch6.png'),
                   image_size=(300, 300), key='clove'),
         sg.Button('Double Fisherman Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doublefishermansknot17.png'),
                   image_size=(300, 300), key='double')],

        [sg.Button('Noose Knot',
                   image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\nooseknot6.png'), image_size=(300, 300),
                   key='noose'),
         sg.Button('Double Overhand Stopper Knot',
                   image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\doubleoverhandstopper7.png'), image_size=(300, 300),
                   key='dubb'),
         sg.Button('Sheet Bend Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\sheetbend7.png'),
                   image_size=(300, 300), key='sheet'),
         sg.Button('Figure 8 Knot', image_filename=(r'C:\Users\User\PycharmProjects\GUI\Survival\knots\fig8knot4.png'),
                   image_size=(300, 300), key='fig')]

    ]

    layout_other = [
        [(sg.Column(other, size=(1400, 800), background_color='white', scrollable=True))
         ]]



    layout_survivaltab = [
        [sg.TabGroup([[sg.Tab('Overview', layout_other),
                       sg.Tab('Water', layout_water),
                       sg.Tab('Fire', layout_fire),
                       sg.Tab('Food', layout_food),
                       sg.Tab('Sleep', layout_sleep),
                       sg.Tab('Injury', layout_injury),
                       sg.Tab('Animals', layout_animals),
                       sg.Tab('Weather', layout_weather),
                       sg.Tab('Camp', layout_wilder),
                       sg.Tab('In water', layout_inwater),
                       sg.Tab('Search', layout_search),
                       sg.Tab('Moving on', layout_movingon),
                       sg.Tab('Shoreside', layout_shore),
                       sg.Tab('Ocean', layout_ocean),
                       sg.Tab('Outback', layout_outback),
                       sg.Tab('Hot Climate', layout_hot),
                       sg.Tab('Cold Climate', layout_cold),
                       sg.Tab('Knots', layout_knots),
                       ]])]]




    title_window.Hide()
    survival_window_active = True


    survival_window = sg.Window('Survival Guide', layout = layout_survivaltab)
    while True:
        event9, value9 = survival_window.Read()
        if event9 is None or event9 == 'Exit':
            survival_window_active = False
            survival_window.Close()
            title_window.UnHide()
            break
        if event9.startswith('crops'):
            crops()
        if event9.startswith('foods'):
            foods()
        if event9.startswith('kilns'):
            kiln()
        if event9.startswith('waterdist'):
            waterdist()
        if event9.startswith('waterwindmill'):
            waterwindmill()
        if event9.startswith('bread'):
            bread()
        if event9.startswith('salt'):
            salt()
        if event9.startswith('skinning'):
            skinning()
        if event9.startswith('chemistry'):
            chemistry()
        if event9.startswith('radio'):
            radio()     
        if event9.startswith('compass'):
            compass()
        if event9.startswith('boats'):
            boats()
        if event9.startswith('soap'):
            soap()
        if event9.startswith('steel'):
            steel()
        if event9.startswith('blake'):
            blake()
        if event9.startswith('bowline'):
            bowline()
        if event9.startswith('clove'):
            clovehitch()
        if event9.startswith('double'):
            double()
        if event9.startswith('noose'):
            noose()
        if event9.startswith('dubb'):
            double2()
        if event9.startswith('sheet'):
            sheet()
        if event9.startswith('fig'):
            fig()
        if event9.startswith('plants'):
            plants()

def pm25():
    title_window.Hide()


    pm25 = [
        [sg.Text('PM 2.5 ', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\pm25.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]

    layout_pm25 = [
        [(sg.Column(pm25, size=(1450, 800), background_color='white', scrollable=True))
         ]]

    title_window.Hide()
    pm25_window_active = True

    pm25_window = sg.Window('Atlas', layout=layout_pm25)
    while True:
        event9, value9 = pm25_window.Read()
        if event9 is None or event9 == 'Exit':
            pm25_window_active = False
            pm25_window.Close()
            title_window.UnHide()
            break

##########################################################################################################################
#########################################################################################################################

#       DEF ATLAS

########################################################################################################################3
########################################################################################################################
def atlas():
    title_window.Hide()


    atlascolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\atlas.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    atlascolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_atlas = [

        [(sg.Column(atlascolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(atlascolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    weuropecolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\weurope.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    weuropecolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_weurope = [

        [(sg.Column(weuropecolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(weuropecolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    usacolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\usa.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    usacolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_usa = [

        [(sg.Column(usacolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(usacolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    oceaniacolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\oceania.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    oceaniacolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_oceania = [

        [(sg.Column(oceaniacolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(oceaniacolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    carracolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\carra.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    carracolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_carra = [

        [(sg.Column(carracolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(carracolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    seasiacolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\seasia.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    seasiacolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_seasia = [

        [(sg.Column(seasiacolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(seasiacolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    japancolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\japan.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    japancolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_japan = [

        [(sg.Column(japancolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(japancolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    icelandcolumn1 = [
        [sg.Text('Atlas', background_color='white', text_color='red')],
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\iceland.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    icelandcolumn2 = [
        [sg.Text('', background_color='white')],
        [sg.Image(r'C:\Users\User\PycharmProjects\GUI\Atlas\markers.png')],
        [sg.Text('', background_color='white', size=(45, 4))]
    ]
    layout_iceland = [

        [(sg.Column(icelandcolumn1, size=(1150, 800), background_color='white', scrollable=True)),
         (sg.Column(icelandcolumn2, size=(300, 800), background_color='white', scrollable=True))
         ]]

    layout_default = [[sg.T()]]

    layout_atlastab = [
        [sg.TabGroup([[sg.Tab('Atlas', layout_atlas),
                       sg.Tab('West Europe', layout_weurope),
                       sg.Tab('South East Asia', layout_seasia),
                       sg.Tab('North Pacific', layout_japan),
                       sg.Tab('South Pacific', layout_oceania),
                       sg.Tab('Caribbean', layout_carra),
                       sg.Tab('North America', layout_usa),
                       sg.Tab('North Atlantic', layout_iceland),
                       sg.Tab('', layout_default)]])]]




    title_window.Hide()
    atlas_window_active = True
 
    atlas_window = sg.Window('Atlas', layout = layout_atlastab)
    while True:
        event9, value9 = atlas_window.\
            Read()
        if event9 is None or event9 == 'Exit':
            atlas_window_active = False
            atlas_window.Close()
            title_window.UnHide()
            break
##############################################################################################################################################################
# ------ Main Window ------ #
##################################################################################################################################################################

menu_def = [['File', ['Open', 'Save', 'Exit', 'Properties']],
            ['Edit', ['Paste', ['Special', 'Normal', ], 'Undo'], ],
            ['Help', 'About...'], ]

column1 = [
        [sg.Button('Immunology',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\immunology3.png',size=(400,100))],
        [sg.Button('Genomics',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\genomics.png',size=(400,100))],
        [sg.Button('Cancer Immunology',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\cancerimmunology.png',size=(400,100))],
        [sg.Button('Stem cell and Neurobiology',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\neurobiology.png',size=(400,100))],
        [sg.Button('Nephrology',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\kidney.png',size=(400,100))],
        [sg.Button('Climate Change',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\climatechange.png',size=(400,100))],
        [sg.Button('Parasitology',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\parasitology4.png',size=(400,100))],
        [sg.Button('Electronics',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\electronics.png',size=(400,100))],
        [sg.Button('Mechanics',size=(22,2), font=("Helvetica", 25)),sg.Image(r'C:\Users\User\PycharmProjects\GUI\gears.png',size=(400,100))],
        [sg.Button('Exit')]]

column2 = [

    [sg.Text('')],
    [sg.Text('Other Topics',size=(20,1), font=("Helvetica", 10))],
    [sg.Button('APA',size=(10,3), font=("Helvetica", 12), key = 'shortcut1'),sg.Button('RBP',size=(10,3), font=("Helvetica", 12),key='shortcut2'),
    sg.Button('Cancer',size=(10,3), font=("Helvetica", 12),key = 'shortcut3'),sg.Button('m5C',size=(10,3), font=("Helvetica", 12),key='shortcut4'),
    sg.Button('PDF Reader',size=(10,3), font=("Helvetica", 12), key = 'pdfreader')],
    [sg.Button('Atlas',size=(10,3), font=("Helvetica", 12), key = 'shortcut6'),sg.Button('Survival',size=(10,3), font=("Helvetica", 12),key='shortcut7'),
    sg.Button('PM2.5 Chart',size=(10,3), font=("Helvetica", 12),key = 'shortcut8'),sg.Button('',size=(10,3), font=("Helvetica", 12),key='shortcut9'),
    sg.Button('',size=(10,3), font=("Helvetica", 12), key = 'shortcut10')],
    [sg.Text('')],
    [sg.Text('Internet links')],
    [sg.Button('Canberra Air',size=(18,2), font=("Helvetica", 12), key = 'shortcutx'),sg.Button('24h Air Quality',size=(18,2), font=("Helvetica", 12),key='shortcuty'),
    sg.Button('Purple Air',size=(18,2), font=("Helvetica", 12), key = 'shortcutz')]

    ]


layout_Main = [
        [sg.Menu(menu_def, tearoff=True)],
        [sg.Column(column1,size=(900,700),scrollable=True),sg.Column(column2,size=(900,700))]
        ]

title_window = sg.Window('Simon Gross Sceience Program v0.1',layout_Main, default_element_size=(30, 1),size=(1750,780), grab_anywhere=True)


immunology_window_active = False
genomics_window_active = False
cancerImmunology_window_active = False
neurobiology_window_active = False
renal_window_active = False
electronics_window_active = False
robotics_window_active = False
climate_window_active = False
survival_window_active = False
atlas_window_active = False
pm25_window_active = False
exit_active = False

while True:
    event1,value1 = title_window.Read()

    if event1 is None and event1 == 'Exit':
        break

    if event1.startswith('shortcut1'):
        shortcut1()

    if event1.startswith('shortcut2'):
        shortcut2()

    if event1.startswith('shortcut3'):
        shortcut3()

    if event1.startswith('shortcut4'):
        shortcut4()

    if event1.startswith('shortcut6'):
        atlas()

    if event1.startswith('shortcut7'):
        survival()

    if event1.startswith('shortcut8'):
        pm25()

    if event1.startswith('shortcutx'):
        webbrowser.open("https://www.canberraair.com")

    if event1.startswith('shortcuty'):
        webbrowser.open("https://www.health.act.gov.au/about-our-health-system/population-health/environmental-monitoring/monitoring-and-regulating-air")

    if event1.startswith('shortcutz'):
        webbrowser.open("https://www.purpleair.com/map?opt=1/mPM25/a0/cC0#9.71/-35.3231/149.0494")

    if event1.startswith('pdfreader'):
        pdfreader()


    if not immunology_window_active and event1 == 'Immunology':
        immunology()

    if not genomics_window_active and event1 == 'Genomics':
        genomics()

    if not renal_window_active and event1 == 'Nephrology':
        renal()

    if not electronics_window_active and event1 == 'Electronics':
        electronics()

    if not electronics_window_active and event1 == 'Survival Guide':
        survival()

    if not atlas_window_active and event1 == 'Atlas':
        atlas()

    if not genomics_window_active and event1 == 'Cancer':
        title_window.Hide()
        cancer_window_active = True
        layout2 = [[sg.Text('Window 2')],
                    [sg.Button('Exit')]]
        cancer_window = sg.Window('Cancer',layout2)
        while True:
            event2,value2 = cancer_window.Read()
            if event2 is None or event2 == 'Exit':
                cancer_window_active = False
                cancer_window.Close()
                title_window.UnHide()
                break

    if not neurobiology_window_active and event1 == 'Neurobiology':
        title_window.Hide()
        neurobiology_window_active = True
        layout2 = [[sg.Text('Window 2')],
                   [sg.Image(r'C:\Users\User\PycharmProjects\GUI\T-cells\Th.png')],
                    [sg.Button('Exit')]]
        neurobiology_window = sg.Window('Cancer').Layout(layout2)
        while True:
            event2,value2 = neurobiology_window.Read()
            if event2 is None or event2 == 'Exit':
                neurobiology_window_active = False
                neurobiology_window.Close()
                title_window.UnHide()
                break

    if not cancerImmunology_window_active and event1 == 'Cancer Immunology':
        cancerImmunology()
    if not climate_window_active and event1 == 'Climate Change':
        climate()






